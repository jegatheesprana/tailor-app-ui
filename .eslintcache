[{"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\index.js":"1","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\serviceWorker.js":"2","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\context\\LayoutContext.js":"3","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\App.js":"4","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\context\\UserContext.js":"5","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\themes\\index.js":"6","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Layout\\Layout.js":"7","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\error\\Error.js":"8","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\login\\Login.js":"9","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\themes\\default.js":"10","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\login\\styles.js":"11","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\charts\\Charts.js":"12","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\charts\\components\\ApexHeatmap.js":"13","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\charts\\components\\ApexLineChart.js":"14","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\PageTitle\\PageTitle.js":"15","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\PageTitle\\styles.js":"16","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Wrappers\\Wrappers.js":"17","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Widget\\Widget.js":"18","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\error\\styles.js":"19","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Widget\\styles.js":"20","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Layout\\styles.js":"21","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\maps\\Maps.js":"22","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\tables\\Tables.js":"23","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\icons\\Icons.js":"24","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\notifications\\Notifications.js":"25","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\typography\\Typography.js":"26","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Header\\Header.js":"27","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\dashboard\\Dashboard.js":"28","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Sidebar\\Sidebar.js":"29","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\dashboard\\mock.js":"30","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\icons\\styles.js":"31","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\dashboard\\components\\Table\\Table.js":"32","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Sidebar\\styles.js":"33","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\dashboard\\components\\BigStat\\BigStat.js":"34","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Sidebar\\components\\Dot.js":"35","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js":"36","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\dashboard\\styles.js":"37","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\UserAvatar\\UserAvatar.js":"38","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Notification\\Notification.js":"39","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\dashboard\\components\\BigStat\\styles.js":"40","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js":"41","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Notification\\styles.js":"42","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\UserAvatar\\styles.js":"43","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\typography\\styles.js":"44","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Header\\styles.js":"45","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\notifications\\styles.js":"46","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\maps\\styles.js":"47","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\customers\\Customers.js":"48","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\measurements\\Measurements.js":"49","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\DataTable\\index.js":"50","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\DataTable\\DataTable.js":"51","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Loader\\SkeltonLoader\\TableSkeletonLoader.js":"52","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\DataTable\\Conformation.js":"53","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\DataTable\\Row.js":"54","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\context\\ToastContext.js":"55","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\DataTable\\Action.js":"56","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\measurements\\Table.js":"57","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\measurements\\Add.js":"58","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Form\\index.js":"59","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Form\\Form.js":"60","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Form\\Input.js":"61","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Loader\\SkeltonLoader\\index.js":"62","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Loader\\SkeltonLoader\\ButtonSkelton.js":"63","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Loader\\SkeltonLoader\\InputSkelton.js":"64","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\hooks\\useFetch.js":"65","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\hooks\\useEditData.js":"66","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Form\\formInput\\index.js":"67","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Form\\formInput\\MDInputRoot.js":"68","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\customers\\Table.js":"69","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\customers\\Add.js":"70","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\tailors\\Tailors.js":"71","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\tailors\\Table.js":"72","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\tailors\\Add.js":"73"},{"size":1015,"mtime":1669718546292,"results":"74","hashOfConfig":"75"},{"size":5083,"mtime":1669656590651,"results":"76","hashOfConfig":"75"},{"size":1444,"mtime":1669656590654,"results":"77","hashOfConfig":"75"},{"size":1781,"mtime":1669824350136,"results":"78","hashOfConfig":"75"},{"size":4154,"mtime":1669824890472,"results":"79","hashOfConfig":"75"},{"size":552,"mtime":1669727632818,"results":"80","hashOfConfig":"75"},{"size":4130,"mtime":1669743870712,"results":"81","hashOfConfig":"75"},{"size":1622,"mtime":1669656599314,"results":"82","hashOfConfig":"75"},{"size":10440,"mtime":1669824614125,"results":"83","hashOfConfig":"75"},{"size":3127,"mtime":1669727632808,"results":"84","hashOfConfig":"75"},{"size":3293,"mtime":1669816776067,"results":"85","hashOfConfig":"75"},{"size":5778,"mtime":1669656599314,"results":"86","hashOfConfig":"75"},{"size":1901,"mtime":1669656591965,"results":"87","hashOfConfig":"75"},{"size":1388,"mtime":1669656592058,"results":"88","hashOfConfig":"75"},{"size":447,"mtime":1669656591901,"results":"89","hashOfConfig":"75"},{"size":474,"mtime":1669656591901,"results":"90","hashOfConfig":"75"},{"size":3983,"mtime":1669656591901,"results":"91","hashOfConfig":"75"},{"size":2592,"mtime":1669656599314,"results":"92","hashOfConfig":"75"},{"size":1387,"mtime":1669656599315,"results":"93","hashOfConfig":"75"},{"size":1007,"mtime":1669656599430,"results":"94","hashOfConfig":"75"},{"size":700,"mtime":1669656864546,"results":"95","hashOfConfig":"75"},{"size":1010,"mtime":1669656872106,"results":"96","hashOfConfig":"75"},{"size":2134,"mtime":1669661299304,"results":"97","hashOfConfig":"75"},{"size":418612,"mtime":1669658339196,"results":"98","hashOfConfig":"75"},{"size":13859,"mtime":1669656872107,"results":"99","hashOfConfig":"75"},{"size":4628,"mtime":1669656591699,"results":"100","hashOfConfig":"75"},{"size":10033,"mtime":1669730079603,"results":"101","hashOfConfig":"75"},{"size":18628,"mtime":1669746671245,"results":"102","hashOfConfig":"75"},{"size":5343,"mtime":1669744032930,"results":"103","hashOfConfig":"75"},{"size":4288,"mtime":1669656599320,"results":"104","hashOfConfig":"75"},{"size":800,"mtime":1669656872106,"results":"105","hashOfConfig":"75"},{"size":1322,"mtime":1669718481997,"results":"106","hashOfConfig":"75"},{"size":1382,"mtime":1669659460633,"results":"107","hashOfConfig":"75"},{"size":4149,"mtime":1669656586513,"results":"108","hashOfConfig":"75"},{"size":894,"mtime":1669656591965,"results":"109","hashOfConfig":"75"},{"size":4586,"mtime":1669656592057,"results":"110","hashOfConfig":"75"},{"size":2992,"mtime":1669656599321,"results":"111","hashOfConfig":"75"},{"size":612,"mtime":1669656591900,"results":"112","hashOfConfig":"75"},{"size":3402,"mtime":1669656591901,"results":"113","hashOfConfig":"75"},{"size":1067,"mtime":1669656586513,"results":"114","hashOfConfig":"75"},{"size":1466,"mtime":1669656592057,"results":"115","hashOfConfig":"75"},{"size":1032,"mtime":1669656591900,"results":"116","hashOfConfig":"75"},{"size":283,"mtime":1669656591900,"results":"117","hashOfConfig":"75"},{"size":381,"mtime":1669656591699,"results":"118","hashOfConfig":"75"},{"size":4053,"mtime":1669659743825,"results":"119","hashOfConfig":"75"},{"size":1935,"mtime":1669656872106,"results":"120","hashOfConfig":"75"},{"size":170,"mtime":1669656591699,"results":"121","hashOfConfig":"75"},{"size":430,"mtime":1669743119465,"results":"122","hashOfConfig":"75"},{"size":445,"mtime":1669729131714,"results":"123","hashOfConfig":"75"},{"size":64,"mtime":1649320294918,"results":"124","hashOfConfig":"75"},{"size":13885,"mtime":1669718995462,"results":"125","hashOfConfig":"75"},{"size":2009,"mtime":1669718319233,"results":"126","hashOfConfig":"75"},{"size":1907,"mtime":1649320294899,"results":"127","hashOfConfig":"75"},{"size":3414,"mtime":1649320294918,"results":"128","hashOfConfig":"75"},{"size":1879,"mtime":1649943019670,"results":"129","hashOfConfig":"75"},{"size":8820,"mtime":1669719018455,"results":"130","hashOfConfig":"75"},{"size":1438,"mtime":1669743120085,"results":"131","hashOfConfig":"75"},{"size":2063,"mtime":1669743173715,"results":"132","hashOfConfig":"75"},{"size":48,"mtime":1649320294920,"results":"133","hashOfConfig":"75"},{"size":6303,"mtime":1669729418933,"results":"134","hashOfConfig":"75"},{"size":14053,"mtime":1669726594543,"results":"135","hashOfConfig":"75"},{"size":141,"mtime":1649320294922,"results":"136","hashOfConfig":"75"},{"size":300,"mtime":1649320294921,"results":"137","hashOfConfig":"75"},{"size":407,"mtime":1649320294921,"results":"138","hashOfConfig":"75"},{"size":1372,"mtime":1669721179492,"results":"139","hashOfConfig":"75"},{"size":960,"mtime":1669721046689,"results":"140","hashOfConfig":"75"},{"size":692,"mtime":1669726596916,"results":"141","hashOfConfig":"75"},{"size":6332,"mtime":1669727779125,"results":"142","hashOfConfig":"75"},{"size":1525,"mtime":1669743119460,"results":"143","hashOfConfig":"75"},{"size":2018,"mtime":1669743119474,"results":"144","hashOfConfig":"75"},{"size":420,"mtime":1669743777382,"results":"145","hashOfConfig":"75"},{"size":1511,"mtime":1669743915385,"results":"146","hashOfConfig":"75"},{"size":2008,"mtime":1669743908491,"results":"147","hashOfConfig":"75"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"151"},"1t5lgp4",{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"151"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"151"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"151"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"199"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"151"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"151"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"151"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"151"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"151"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"151"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"151"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"151"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"151"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"151"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"151"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"295","messages":"296","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"151"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"151"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"151"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"151"},"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\index.js",["315"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ThemeProvider, StyledEngineProvider } from \"@mui/styles\";\r\nimport { CssBaseline } from \"@mui/material\";\r\n\r\nimport Themes from \"./themes\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { LayoutProvider } from \"./context/LayoutContext\";\r\nimport { UserProvider } from \"./context/UserContext\";\r\nimport { ToastProvider } from 'context/ToastContext'\r\n\r\nReactDOM.render(\r\n  <LayoutProvider>\r\n    <ToastProvider>\r\n      <UserProvider>\r\n        <ThemeProvider theme={Themes.default}>\r\n          <CssBaseline />\r\n          <App />\r\n        </ThemeProvider>\r\n      </UserProvider>\r\n    </ToastProvider>\r\n  </LayoutProvider>,\r\n  document.getElementById(\"root\"),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n",["316","317"],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\serviceWorker.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\context\\LayoutContext.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\App.js",["318"],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\context\\UserContext.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\themes\\index.js",["319"],"import defaultTheme from \"./default\";\r\n\r\nimport { createTheme, adaptV4Theme } from \"@mui/material\";\r\n\r\nconst overrides = {\r\n  typography: {\r\n    h1: {\r\n      fontSize: \"3rem\",\r\n    },\r\n    h2: {\r\n      fontSize: \"2rem\",\r\n    },\r\n    h3: {\r\n      fontSize: \"1.64rem\",\r\n    },\r\n    h4: {\r\n      fontSize: \"1.5rem\",\r\n    },\r\n    h5: {\r\n      fontSize: \"1.285rem\",\r\n    },\r\n    h6: {\r\n      fontSize: \"1.142rem\",\r\n    },\r\n  },\r\n};\r\n\r\nconst themes = {\r\n  default: createTheme(adaptV4Theme({ ...defaultTheme, ...overrides })),\r\n};\r\n\r\nexport default themes;\r\n","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Layout\\Layout.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\error\\Error.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\login\\Login.js",["320","321"],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\themes\\default.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\login\\styles.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\charts\\Charts.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\charts\\components\\ApexHeatmap.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\charts\\components\\ApexLineChart.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\PageTitle\\PageTitle.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\PageTitle\\styles.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Wrappers\\Wrappers.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Widget\\Widget.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\error\\styles.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Widget\\styles.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Layout\\styles.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\maps\\Maps.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\tables\\Tables.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\icons\\Icons.js",[],["322","323"],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\notifications\\Notifications.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\typography\\Typography.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Header\\Header.js",["324","325"],"import React, { useState } from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  InputBase,\r\n  Menu,\r\n  MenuItem,\r\n  Fab,\r\n  Link\r\n} from \"@mui/material\";\r\nimport {\r\n  Menu as MenuIcon,\r\n  MailOutline as MailIcon,\r\n  NotificationsNone as NotificationsIcon,\r\n  Person as AccountIcon,\r\n  Search as SearchIcon,\r\n  Send as SendIcon,\r\n  ArrowBack as ArrowBackIcon,\r\n} from \"@mui/icons-material\";\r\nimport classNames from \"classnames\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport { Badge, Typography, Button } from \"../Wrappers\";\r\nimport Notification from \"../Notification/Notification\";\r\nimport UserAvatar from \"../UserAvatar/UserAvatar\";\r\n\r\n// context\r\nimport {\r\n  useLayoutState,\r\n  useLayoutDispatch,\r\n  toggleSidebar,\r\n} from \"../../context/LayoutContext\";\r\nimport { useUserDispatch, signOut } from \"../../context/UserContext\";\r\n\r\nconst messages = [\r\n  {\r\n    id: 0,\r\n    variant: \"warning\",\r\n    name: \"Jane Hew\",\r\n    message: \"Hey! How is it going?\",\r\n    time: \"9:32\",\r\n  },\r\n  {\r\n    id: 1,\r\n    variant: \"success\",\r\n    name: \"Lloyd Brown\",\r\n    message: \"Check out my new Dashboard\",\r\n    time: \"9:18\",\r\n  },\r\n  {\r\n    id: 2,\r\n    variant: \"primary\",\r\n    name: \"Mark Winstein\",\r\n    message: \"I want rearrange the appointment\",\r\n    time: \"9:15\",\r\n  },\r\n  {\r\n    id: 3,\r\n    variant: \"secondary\",\r\n    name: \"Liana Dutti\",\r\n    message: \"Good news from sale department\",\r\n    time: \"9:09\",\r\n  },\r\n];\r\n\r\nconst notifications = [\r\n  { id: 0, color: \"warning\", message: \"Check out this awesome ticket\" },\r\n  {\r\n    id: 1,\r\n    color: \"success\",\r\n    type: \"info\",\r\n    message: \"What is the best way to get ...\",\r\n  },\r\n  {\r\n    id: 2,\r\n    color: \"secondary\",\r\n    type: \"notification\",\r\n    message: \"This is just a simple notification\",\r\n  },\r\n  {\r\n    id: 3,\r\n    color: \"primary\",\r\n    type: \"e-commerce\",\r\n    message: \"12 new orders has arrived today\",\r\n  },\r\n];\r\n\r\nexport default function Header(props) {\r\n  var classes = useStyles();\r\n\r\n  // global\r\n  var layoutState = useLayoutState();\r\n  var layoutDispatch = useLayoutDispatch();\r\n  var userDispatch = useUserDispatch();\r\n\r\n  // local\r\n  var [mailMenu, setMailMenu] = useState(null);\r\n  var [isMailsUnread, setIsMailsUnread] = useState(true);\r\n  var [notificationsMenu, setNotificationsMenu] = useState(null);\r\n  var [isNotificationsUnread, setIsNotificationsUnread] = useState(true);\r\n  var [profileMenu, setProfileMenu] = useState(null);\r\n  var [isSearchOpen, setSearchOpen] = useState(false);\r\n\r\n  return (\r\n    <AppBar position=\"fixed\" className={classes.appBar}>\r\n      <Toolbar className={classes.toolbar}>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          onClick={() => toggleSidebar(layoutDispatch)}\r\n          className={classNames(\r\n            classes.headerMenuButtonSandwich,\r\n            classes.headerMenuButtonCollapse,\r\n          )}\r\n          size=\"large\">\r\n          {layoutState.isSidebarOpened ? (\r\n            <ArrowBackIcon\r\n              classes={{\r\n                root: classNames(\r\n                  classes.headerIcon,\r\n                  classes.headerIconCollapse,\r\n                ),\r\n              }}\r\n            />\r\n          ) : (\r\n            <MenuIcon\r\n              classes={{\r\n                root: classNames(\r\n                  classes.headerIcon,\r\n                  classes.headerIconCollapse,\r\n                ),\r\n              }}\r\n            />\r\n          )}\r\n        </IconButton>\r\n        <Typography variant=\"h6\" weight=\"medium\" className={classes.logotype}>\r\n          LONDON CUT\r\n        </Typography>\r\n        <div className={classes.grow} />\r\n\r\n        <div\r\n          className={classNames(classes.search, {\r\n            [classes.searchFocused]: isSearchOpen,\r\n          })}\r\n        >\r\n          <div\r\n            className={classNames(classes.searchIcon, {\r\n              [classes.searchIconOpened]: isSearchOpen,\r\n            })}\r\n            onClick={() => setSearchOpen(!isSearchOpen)}\r\n          >\r\n            <SearchIcon classes={{ root: classes.headerIcon }} />\r\n          </div>\r\n          <InputBase\r\n            placeholder=\"Search…\"\r\n            classes={{\r\n              root: classes.inputRoot,\r\n              input: classes.inputInput,\r\n            }}\r\n          />\r\n        </div>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          aria-haspopup=\"true\"\r\n          aria-controls=\"mail-menu\"\r\n          onClick={e => {\r\n            setNotificationsMenu(e.currentTarget);\r\n            setIsNotificationsUnread(false);\r\n          }}\r\n          className={classes.headerMenuButton}\r\n          size=\"large\">\r\n          <Badge\r\n            badgeContent={isNotificationsUnread ? notifications.length : null}\r\n            color=\"warning\"\r\n          >\r\n            <NotificationsIcon classes={{ root: classes.headerIcon }} />\r\n          </Badge>\r\n        </IconButton>\r\n        <IconButton\r\n          color=\"inherit\"\r\n          aria-haspopup=\"true\"\r\n          aria-controls=\"mail-menu\"\r\n          onClick={e => {\r\n            setMailMenu(e.currentTarget);\r\n            setIsMailsUnread(false);\r\n          }}\r\n          className={classes.headerMenuButton}\r\n          size=\"large\">\r\n          <Badge\r\n            badgeContent={isMailsUnread ? messages.length : null}\r\n            color=\"secondary\"\r\n          >\r\n            <MailIcon classes={{ root: classes.headerIcon }} />\r\n          </Badge>\r\n        </IconButton>\r\n        <IconButton\r\n          aria-haspopup=\"true\"\r\n          color=\"inherit\"\r\n          className={classes.headerMenuButton}\r\n          aria-controls=\"profile-menu\"\r\n          onClick={e => setProfileMenu(e.currentTarget)}\r\n          size=\"large\">\r\n          <AccountIcon classes={{ root: classes.headerIcon }} />\r\n        </IconButton>\r\n        <Menu\r\n          id=\"mail-menu\"\r\n          open={Boolean(mailMenu)}\r\n          anchorEl={mailMenu}\r\n          onClose={() => setMailMenu(null)}\r\n          MenuListProps={{ className: classes.headerMenuList }}\r\n          className={classes.headerMenu}\r\n          classes={{ paper: classes.profileMenu }}\r\n          disableAutoFocusItem\r\n        >\r\n          <div className={classes.profileMenuUser}>\r\n            <Typography variant=\"h4\" weight=\"medium\">\r\n              New Messages\r\n            </Typography>\r\n            <Typography\r\n              className={classes.profileMenuLink}\r\n              component=\"a\"\r\n              color=\"secondary\"\r\n            >\r\n              {messages.length} New Messages\r\n            </Typography>\r\n          </div>\r\n          {messages.map(message => (\r\n            <MenuItem key={message.id} className={classes.messageNotification}>\r\n              <div className={classes.messageNotificationSide}>\r\n                <UserAvatar color={message.variant} name={message.name} />\r\n                <Typography size=\"sm\" color=\"text\" colorBrightness=\"secondary\">\r\n                  {message.time}\r\n                </Typography>\r\n              </div>\r\n              <div\r\n                className={classNames(\r\n                  classes.messageNotificationSide,\r\n                  classes.messageNotificationBodySide,\r\n                )}\r\n              >\r\n                <Typography weight=\"medium\" gutterBottom>\r\n                  {message.name}\r\n                </Typography>\r\n                <Typography color=\"text\" colorBrightness=\"secondary\">\r\n                  {message.message}\r\n                </Typography>\r\n              </div>\r\n            </MenuItem>\r\n          ))}\r\n          <Fab\r\n            variant=\"extended\"\r\n            color=\"primary\"\r\n            aria-label=\"Add\"\r\n            className={classes.sendMessageButton}\r\n          >\r\n            Send New Message\r\n            <SendIcon className={classes.sendButtonIcon} />\r\n          </Fab>\r\n        </Menu>\r\n        <Menu\r\n          id=\"notifications-menu\"\r\n          open={Boolean(notificationsMenu)}\r\n          anchorEl={notificationsMenu}\r\n          onClose={() => setNotificationsMenu(null)}\r\n          className={classes.headerMenu}\r\n          disableAutoFocusItem\r\n        >\r\n          {notifications.map(notification => (\r\n            <MenuItem\r\n              key={notification.id}\r\n              onClick={() => setNotificationsMenu(null)}\r\n              className={classes.headerMenuItem}\r\n            >\r\n              <Notification {...notification} typographyVariant=\"inherit\" />\r\n            </MenuItem>\r\n          ))}\r\n        </Menu>\r\n        <Menu\r\n          id=\"profile-menu\"\r\n          open={Boolean(profileMenu)}\r\n          anchorEl={profileMenu}\r\n          onClose={() => setProfileMenu(null)}\r\n          className={classes.headerMenu}\r\n          classes={{ paper: classes.profileMenu }}\r\n          disableAutoFocusItem\r\n        >\r\n          <div className={classes.profileMenuUser}>\r\n            <Typography variant=\"h4\" weight=\"medium\">\r\n              John Smith\r\n            </Typography>\r\n          </div>\r\n          <MenuItem\r\n            className={classNames(\r\n              classes.profileMenuItem,\r\n              classes.headerMenuItem,\r\n            )}\r\n          >\r\n            <AccountIcon className={classes.profileMenuIcon} /> Profile\r\n          </MenuItem>\r\n          <MenuItem\r\n            className={classNames(\r\n              classes.profileMenuItem,\r\n              classes.headerMenuItem,\r\n            )}\r\n          >\r\n            <AccountIcon className={classes.profileMenuIcon} /> Tasks\r\n          </MenuItem>\r\n          <MenuItem\r\n            className={classNames(\r\n              classes.profileMenuItem,\r\n              classes.headerMenuItem,\r\n            )}\r\n          >\r\n            <AccountIcon className={classes.profileMenuIcon} /> Messages\r\n          </MenuItem>\r\n          <div className={classes.profileMenuUser}>\r\n            <Typography\r\n              className={classes.profileMenuLink}\r\n              color=\"primary\"\r\n              onClick={() => signOut(userDispatch, props.history)}\r\n            >\r\n              Sign Out\r\n            </Typography>\r\n          </div>\r\n        </Menu>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\dashboard\\Dashboard.js",["326"],"import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Grid,\r\n  LinearProgress,\r\n  Select,\r\n  OutlinedInput,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport { useTheme } from \"@mui/styles\";\r\nimport {\r\n  ResponsiveContainer,\r\n  ComposedChart,\r\n  AreaChart,\r\n  LineChart,\r\n  Line,\r\n  Area,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  YAxis,\r\n  XAxis,\r\n} from \"recharts\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport mock from \"./mock\";\r\nimport Widget from \"../../components/Widget\";\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport { Typography as TypographyWrapper } from \"../../components/Wrappers\";\r\nimport Dot from \"../../components/Sidebar/components/Dot\";\r\nimport Table from \"./components/Table/Table\";\r\nimport BigStat from \"./components/BigStat/BigStat\";\r\n\r\nconst mainChartData = getMainChartData();\r\nconst PieChartData = [\r\n  { name: \"Group A\", value: 400, color: \"primary\" },\r\n  { name: \"Group B\", value: 300, color: \"secondary\" },\r\n  { name: \"Group C\", value: 300, color: \"warning\" },\r\n  { name: \"Group D\", value: 200, color: \"success\" },\r\n];\r\nconst menus = [\r\n  { name: 'Measurement', description: 'Measurement is the quantification of attributes of an object or event, which can be used to compare with other objects or events.', to: '/app/measurements', img: '/static/menus/measurements.jpg' },\r\n  { name: 'Customer', description: 'Recipient of a good, service, product or an idea - obtained from a seller, vendor', to: '/app/customers', img: '/static/menus/customers.png' },\r\n  { name: 'Work Order', description: 'A task or a job for a customer, that can be scheduled or assigned to someone.', to: '/app/workOrders', img: '/static/menus/workOrders.png' },\r\n  { name: 'CoatRenting', description: 'Renting, also known as hiring or letting, is an agreement', to: '/app/coatRentings', img: '/static/menus/coatRentings.jpg' },\r\n  { name: 'Products', description: 'In marketing, a product is an object, or system, or service made available for consumer use as of the consumer demand', to: '/app/products', img: '/static/menus/products.jpg' },\r\n  { name: 'Materials', description: 'Material is a substance or mixture of substances that constitutes an object. Materials can be pure or impure, living or non-living matter.', to: '/app/materials', img: '/static/menus/materials.png' },\r\n  { name: 'Tailors', description: 'A tailor is a person who makes or alters clothing, particularly in men\\'s clothing.', to: '/app/tailors', img: '/static/menus/tailors.png' },\r\n  { name: 'Payments', description: 'A payment is the voluntary tender of money or its equivalent or of things of value by one party to another in exchange for goods, or services', to: '/app/payments', img: '/static/menus/payments.png' },\r\n]\r\n\r\nexport default function Dashboard(props) {\r\n  var classes = useStyles();\r\n  var theme = useTheme();\r\n\r\n  // local\r\n  var [mainChartState, setMainChartState] = useState(\"monthly\");\r\n\r\n  return <Grid container spacing={4} mt={2}>\r\n    {menus.map((menu, id) => (\r\n      <Grid item xs={4} lg={3} md={4} key={id}>\r\n        <Card sx={{ maxWidth: 345 }}>\r\n          <CardMedia\r\n            component=\"img\"\r\n            height=\"140\"\r\n            image={menu.img}\r\n            alt=\"green iguana\"\r\n          />\r\n          <CardContent>\r\n            <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n              {menu.name}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              {menu.description}\r\n            </Typography>\r\n          </CardContent>\r\n          <CardActions>\r\n            <Button size=\"small\" component={Link} to={menu.to}>Go</Button>\r\n            <Button size=\"small\" component={Link} to={menu.to}>Learn More</Button>\r\n          </CardActions>\r\n        </Card>\r\n      </Grid>\r\n    ))}\r\n  </Grid>\r\n\r\n  return <>\r\n    <PageTitle title=\"Dashboard\" button={<Button\r\n      variant=\"contained\"\r\n      size=\"medium\"\r\n      color=\"secondary\"\r\n    >\r\n      Latest Reports\r\n    </Button>} />\r\n    <Grid container spacing={4}>\r\n      <Grid item lg={3} md={4} sm={6} xs={12}>\r\n        <Widget\r\n          title=\"Visits Today\"\r\n          upperTitle\r\n          bodyClass={classes.fullHeightBody}\r\n          className={classes.card}\r\n        >\r\n          <div className={classes.visitsNumberContainer}>\r\n            <Grid container item alignItems={\"center\"}>\r\n              <Grid item xs={6}>\r\n                <TypographyWrapper size=\"xl\" weight=\"medium\" noWrap>\r\n                  12, 678\r\n                </TypographyWrapper>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <LineChart\r\n                  width={100}\r\n                  height={30}\r\n                  data={[\r\n                    { value: 10 },\r\n                    { value: 15 },\r\n                    { value: 10 },\r\n                    { value: 17 },\r\n                    { value: 18 },\r\n                  ]}\r\n                >\r\n                  <Line\r\n                    type=\"natural\"\r\n                    dataKey=\"value\"\r\n                    stroke={theme.palette.success.main}\r\n                    strokeWidth={2}\r\n                    dot={false}\r\n                  />\r\n                </LineChart>\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item xs={4}>\r\n              <TypographyWrapper color=\"text\" colorBrightness=\"secondary\" noWrap>\r\n                Registrations\r\n              </TypographyWrapper>\r\n              <TypographyWrapper size=\"md\">860</TypographyWrapper>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <TypographyWrapper color=\"text\" colorBrightness=\"secondary\" noWrap>\r\n                Sign Out\r\n              </TypographyWrapper>\r\n              <TypographyWrapper size=\"md\">32</TypographyWrapper>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <TypographyWrapper color=\"text\" colorBrightness=\"secondary\" noWrap>\r\n                Rate\r\n              </TypographyWrapper>\r\n              <TypographyWrapper size=\"md\">3.25%</TypographyWrapper>\r\n            </Grid>\r\n          </Grid>\r\n        </Widget>\r\n      </Grid>\r\n      <Grid item lg={3} md={8} sm={6} xs={12}>\r\n        <Widget\r\n          title=\"App Performance\"\r\n          upperTitle\r\n          className={classes.card}\r\n          bodyClass={classes.fullHeightBody}\r\n        >\r\n          <div className={classes.performanceLegendWrapper}>\r\n            <div className={classes.legendElement}>\r\n              <Dot color=\"warning\" />\r\n              <TypographyWrapper\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.legendElementText}\r\n              >\r\n                Integration\r\n              </TypographyWrapper>\r\n            </div>\r\n            <div className={classes.legendElement}>\r\n              <Dot color=\"primary\" />\r\n              <TypographyWrapper\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n                className={classes.legendElementText}\r\n              >\r\n                SDK\r\n              </TypographyWrapper>\r\n            </div>\r\n          </div>\r\n          <div className={classes.progressSection}>\r\n            <TypographyWrapper\r\n              size=\"md\"\r\n              color=\"text\"\r\n              colorBrightness=\"secondary\"\r\n              className={classes.progressSectionTitle}\r\n            >\r\n              Integration\r\n            </TypographyWrapper>\r\n            <LinearProgress\r\n              variant=\"determinate\"\r\n              value={77}\r\n              classes={{ barColorPrimary: classes.progressBarPrimary }}\r\n              className={classes.progress}\r\n            />\r\n          </div>\r\n          <div>\r\n            <TypographyWrapper\r\n              size=\"md\"\r\n              color=\"text\"\r\n              colorBrightness=\"secondary\"\r\n              className={classes.progressSectionTitle}\r\n            >\r\n              SDK\r\n            </TypographyWrapper>\r\n            <LinearProgress\r\n              variant=\"determinate\"\r\n              value={73}\r\n              classes={{ barColorPrimary: classes.progressBarWarning }}\r\n              className={classes.progress}\r\n            />\r\n          </div>\r\n        </Widget>\r\n      </Grid>\r\n      <Grid item lg={3} md={8} sm={6} xs={12}>\r\n        <Widget\r\n          title=\"Server Overview\"\r\n          upperTitle\r\n          className={classes.card}\r\n          bodyClass={classes.fullHeightBody}\r\n        >\r\n          <div className={classes.serverOverviewElement}>\r\n            <TypographyWrapper\r\n              color=\"text\"\r\n              colorBrightness=\"secondary\"\r\n              className={classes.serverOverviewElementText}\r\n              noWrap\r\n            >\r\n              60% / 37°С / 3.3 Ghz\r\n            </TypographyWrapper>\r\n            <div className={classes.serverOverviewElementChartWrapper}>\r\n              <ResponsiveContainer height={50} width=\"99%\">\r\n                <AreaChart data={getRandomData(10)}>\r\n                  <Area\r\n                    type=\"natural\"\r\n                    dataKey=\"value\"\r\n                    stroke={theme.palette.secondary.main}\r\n                    fill={theme.palette.secondary.light}\r\n                    strokeWidth={2}\r\n                    fillOpacity=\"0.25\"\r\n                  />\r\n                </AreaChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </div>\r\n          <div className={classes.serverOverviewElement}>\r\n            <TypographyWrapper\r\n              color=\"text\"\r\n              colorBrightness=\"secondary\"\r\n              className={classes.serverOverviewElementText}\r\n              noWrap\r\n            >\r\n              54% / 31°С / 3.3 Ghz\r\n            </TypographyWrapper>\r\n            <div className={classes.serverOverviewElementChartWrapper}>\r\n              <ResponsiveContainer height={50} width=\"99%\">\r\n                <AreaChart data={getRandomData(10)}>\r\n                  <Area\r\n                    type=\"natural\"\r\n                    dataKey=\"value\"\r\n                    stroke={theme.palette.primary.main}\r\n                    fill={theme.palette.primary.light}\r\n                    strokeWidth={2}\r\n                    fillOpacity=\"0.25\"\r\n                  />\r\n                </AreaChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </div>\r\n          <div className={classes.serverOverviewElement}>\r\n            <TypographyWrapper\r\n              color=\"text\"\r\n              colorBrightness=\"secondary\"\r\n              className={classes.serverOverviewElementText}\r\n              noWrap\r\n            >\r\n              57% / 21°С / 3.3 Ghz\r\n            </TypographyWrapper>\r\n            <div className={classes.serverOverviewElementChartWrapper}>\r\n              <ResponsiveContainer height={50} width=\"99%\">\r\n                <AreaChart data={getRandomData(10)}>\r\n                  <Area\r\n                    type=\"natural\"\r\n                    dataKey=\"value\"\r\n                    stroke={theme.palette.warning.main}\r\n                    fill={theme.palette.warning.light}\r\n                    strokeWidth={2}\r\n                    fillOpacity=\"0.25\"\r\n                  />\r\n                </AreaChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </div>\r\n        </Widget>\r\n      </Grid>\r\n      <Grid item lg={3} md={4} sm={6} xs={12}>\r\n        <Widget title=\"Revenue Breakdown\" upperTitle className={classes.card}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={6}>\r\n              <ResponsiveContainer width=\"100%\" height={144}>\r\n                <PieChart>\r\n                  <Pie\r\n                    data={PieChartData}\r\n                    innerRadius={30}\r\n                    outerRadius={40}\r\n                    dataKey=\"value\"\r\n                  >\r\n                    {PieChartData.map((entry, index) => (\r\n                      <Cell\r\n                        key={`cell-${index}`}\r\n                        fill={theme.palette[entry.color].main}\r\n                      />\r\n                    ))}\r\n                  </Pie>\r\n                </PieChart>\r\n              </ResponsiveContainer>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <div className={classes.pieChartLegendWrapper}>\r\n                {PieChartData.map(({ name, value, color }, index) => (\r\n                  <div key={color} className={classes.legendItemContainer}>\r\n                    <Dot color={color} />\r\n                    <TypographyWrapper style={{ whiteSpace: \"nowrap\", fontSize: 12 }} >\r\n                      &nbsp;{name}&nbsp;\r\n                    </TypographyWrapper>\r\n                    <TypographyWrapper color=\"text\" colorBrightness=\"secondary\">\r\n                      &nbsp;{value}\r\n                    </TypographyWrapper>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </Widget>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Widget\r\n          bodyClass={classes.mainChartBody}\r\n          header={\r\n            <div className={classes.mainChartHeader}>\r\n              <TypographyWrapper\r\n                variant=\"h5\"\r\n                color=\"text\"\r\n                colorBrightness=\"secondary\"\r\n              >\r\n                Daily Line Chart\r\n              </TypographyWrapper>\r\n              <div className={classes.mainChartHeaderLabels}>\r\n                <div className={classes.mainChartHeaderLabel}>\r\n                  <Dot color=\"warning\" />\r\n                  <TypographyWrapper className={classes.mainChartLegentElement}>\r\n                    Tablet\r\n                  </TypographyWrapper>\r\n                </div>\r\n                <div className={classes.mainChartHeaderLabel}>\r\n                  <Dot color=\"primary\" />\r\n                  <TypographyWrapper className={classes.mainChartLegentElement}>\r\n                    Mobile\r\n                  </TypographyWrapper>\r\n                </div>\r\n                <div className={classes.mainChartHeaderLabel}>\r\n                  <Dot color=\"secondary\" />\r\n                  <TypographyWrapper className={classes.mainChartLegentElement}>\r\n                    Desktop\r\n                  </TypographyWrapper>\r\n                </div>\r\n              </div>\r\n              <Select\r\n                value={mainChartState}\r\n                onChange={e => setMainChartState(e.target.value)}\r\n                input={\r\n                  <OutlinedInput\r\n                    labelWidth={0}\r\n                    classes={{\r\n                      notchedOutline: classes.mainChartSelectRoot,\r\n                      input: classes.mainChartSelect,\r\n                    }}\r\n                  />\r\n                }\r\n                autoWidth\r\n              >\r\n                <MenuItem value=\"daily\">Daily</MenuItem>\r\n                <MenuItem value=\"weekly\">Weekly</MenuItem>\r\n                <MenuItem value=\"monthly\">Monthly</MenuItem>\r\n              </Select>\r\n            </div>\r\n          }\r\n        >\r\n          <ResponsiveContainer width=\"100%\" minWidth={500} height={350}>\r\n            <ComposedChart\r\n              margin={{ top: 0, right: -15, left: -15, bottom: 0 }}\r\n              data={mainChartData}\r\n            >\r\n              <YAxis\r\n                ticks={[0, 2500, 5000, 7500]}\r\n                tick={{ fill: theme.palette.text.hint + \"80\", fontSize: 14 }}\r\n                stroke={theme.palette.text.hint + \"80\"}\r\n                tickLine={false}\r\n              />\r\n              <XAxis\r\n                tickFormatter={i => i + 1}\r\n                tick={{ fill: theme.palette.text.hint + \"80\", fontSize: 14 }}\r\n                stroke={theme.palette.text.hint + \"80\"}\r\n                tickLine={false}\r\n              />\r\n              <Area\r\n                type=\"natural\"\r\n                dataKey=\"desktop\"\r\n                fill={theme.palette.background.light}\r\n                strokeWidth={0}\r\n                activeDot={false}\r\n              />\r\n              <Line\r\n                type=\"natural\"\r\n                dataKey=\"mobile\"\r\n                stroke={theme.palette.primary.main}\r\n                strokeWidth={2}\r\n                dot={false}\r\n                activeDot={false}\r\n              />\r\n              <Line\r\n                type=\"linear\"\r\n                dataKey=\"tablet\"\r\n                stroke={theme.palette.warning.main}\r\n                strokeWidth={2}\r\n                dot={{\r\n                  stroke: theme.palette.warning.dark,\r\n                  strokeWidth: 2,\r\n                  fill: theme.palette.warning.main,\r\n                }}\r\n              />\r\n            </ComposedChart>\r\n          </ResponsiveContainer>\r\n        </Widget>\r\n      </Grid>\r\n      {mock.bigStat.map(stat => (\r\n        <Grid item md={4} sm={6} xs={12} key={stat.product}>\r\n          <BigStat {...stat} />\r\n        </Grid>\r\n      ))}\r\n      <Grid item xs={12}>\r\n        <Widget\r\n          title=\"Support Requests\"\r\n          upperTitle\r\n          noBodyPadding\r\n          bodyClass={classes.tableWidget}\r\n        >\r\n          <Table data={mock.table} />\r\n        </Widget>\r\n      </Grid>\r\n    </Grid>\r\n  </>;\r\n}\r\n\r\n// #######################################################################\r\nfunction getRandomData(length, min, max, multiplier = 10, maxDiff = 10) {\r\n  var array = new Array(length).fill();\r\n  let lastValue;\r\n\r\n  return array.map((item, index) => {\r\n    let randomValue = Math.floor(Math.random() * multiplier + 1);\r\n\r\n    while (\r\n      randomValue <= min ||\r\n      randomValue >= max ||\r\n      (lastValue && randomValue - lastValue > maxDiff)\r\n    ) {\r\n      randomValue = Math.floor(Math.random() * multiplier + 1);\r\n    }\r\n\r\n    lastValue = randomValue;\r\n\r\n    return { value: randomValue };\r\n  });\r\n}\r\n\r\nfunction getMainChartData() {\r\n  var resultArray = [];\r\n  var tablet = getRandomData(31, 3500, 6500, 7500, 1000);\r\n  var desktop = getRandomData(31, 1500, 7500, 7500, 1500);\r\n  var mobile = getRandomData(31, 1500, 7500, 7500, 1500);\r\n\r\n  for (let i = 0; i < tablet.length; i++) {\r\n    resultArray.push({\r\n      tablet: tablet[i].value,\r\n      desktop: desktop[i].value,\r\n      mobile: mobile[i].value,\r\n    });\r\n  }\r\n\r\n  return resultArray;\r\n}\r\n","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Sidebar\\Sidebar.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\dashboard\\mock.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\icons\\styles.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\dashboard\\components\\Table\\Table.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Sidebar\\styles.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\dashboard\\components\\BigStat\\BigStat.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Sidebar\\components\\Dot.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\dashboard\\styles.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\UserAvatar\\UserAvatar.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Notification\\Notification.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\dashboard\\components\\BigStat\\styles.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Notification\\styles.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\UserAvatar\\styles.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\typography\\styles.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Header\\styles.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\notifications\\styles.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\maps\\styles.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\customers\\Customers.js",["327"],"import React from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport MUIDataTable from \"mui-datatables\";\r\n\r\n// components\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport Widget from \"../../components/Widget\";\r\nimport Table from \"../dashboard/components/Table/Table\";\r\n\r\n// data\r\nimport mock from \"../dashboard/mock\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  tableOverflow: {\r\n    overflow: 'auto'\r\n  }\r\n}))\r\n\r\nexport default function Tables() {\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <PageTitle title=\"Customers\" />\r\n      <Grid container spacing={4}>\r\n        <Grid item xs={12}>\r\n          <Widget title=\"Customers\" upperTitle noBodyPadding bodyClass={classes.tableOverflow}>\r\n            <Table data={mock.table} />\r\n          </Widget>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\measurements\\Measurements.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\DataTable\\index.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\DataTable\\DataTable.js",["328","329","330","331","332","333","334","335"],"import { useState, useEffect } from 'react';\r\nimport {\r\n    Box,\r\n    Card,\r\n    Checkbox,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TablePagination,\r\n    TableRow,\r\n    Typography\r\n} from '@mui/material';\r\nimport Row from './Row';\r\nimport Conformation from './Conformation';\r\n// import { useAuth } from 'context/AuthContext';\r\nimport { useUserState } from 'context/UserContext';\r\nimport { useToast } from 'context/ToastContext'\r\nimport TableSkeletonLoader from 'components/Loader/SkeltonLoader/TableSkeletonLoader';\r\n\r\nconst DatTable = (props) => {\r\n    const {\r\n        title,\r\n        columns = [],\r\n        itemsUrl,\r\n        rows: items,\r\n        loading,\r\n        actions = {},\r\n        customActions = [],\r\n        expand,\r\n        pagination = true,\r\n        tableOnly,\r\n        additionalData,\r\n        refresh,\r\n        ...rest\r\n    } = props;\r\n\r\n    const { customFetch } = useUserState()\r\n    const { toastMessage } = useToast()\r\n\r\n    const [rows, setRows] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState('');\r\n\r\n    const [selectedrowIds, setSelectedrowIds] = useState([]);\r\n    const [limit, setLimit] = useState(10);\r\n    const [page, setPage] = useState(0);\r\n\r\n    const [conformation, setConformation] = useState({ title: null, message: null, show: false, onSuccess: null })\r\n\r\n    const handleConformationClose = () => {\r\n        setConformation({ ...conformation, show: false, onSuccess: null })\r\n    }\r\n\r\n    const removerow = (item, additionalData, id, callback) => {\r\n        const delApiURL = actions.delUrl(item, additionalData, id);\r\n        customFetch(delApiURL.startsWith('/') ? delApiURL : '/' + delApiURL, {\r\n            method: 'DELETE',\r\n        }).then(() => {\r\n            toastMessage(\"Successfully Removed\")\r\n            callback()\r\n            setRows(rows.filter(i => i !== item))\r\n        })\r\n            .catch(console.log)\r\n    }\r\n\r\n    const updateRow = (rowId, newRow) => {\r\n        if (!newRow) {\r\n            setRows(rows.filter((i, id) => id !== rowId))\r\n        } else {\r\n            const duplicate = [...rows]\r\n            duplicate[rowId] = newRow\r\n            setRows(duplicate)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (itemsUrl) {\r\n            const abortCont = new AbortController();\r\n            customFetch(itemsUrl, { signal: abortCont.signal })\r\n                .then(res => {\r\n                    if (res.status !== 200 && res.status !== 304) {\r\n                        throw Error('could not fetch data')\r\n                    }\r\n                    return res.json()\r\n                })\r\n                .then(data => {\r\n                    setRows(data);\r\n                    setIsLoading(false);\r\n                })\r\n                .catch(err => {\r\n                    if (err.name === 'AbortError') {\r\n                        console.log('Fetch aborted');\r\n                    } else {\r\n                        setIsLoading(false);\r\n                        setError(err.message);\r\n                    }\r\n                });\r\n            return () => abortCont.abort();\r\n        }\r\n    }, [itemsUrl, refresh])\r\n\r\n    useEffect(() => {\r\n        if (!itemsUrl) {\r\n            setRows(items)\r\n        }\r\n    }, [items])\r\n\r\n    useEffect(() => {\r\n        if (!itemsUrl) {\r\n            setIsLoading(loading)\r\n        }\r\n    }, [loading])\r\n\r\n    const handleSelectAll = (event) => {\r\n        let newSelectedrowIds;\r\n\r\n        if (event.target.checked) {\r\n            newSelectedrowIds = rows.map((row) => row.id);\r\n        } else {\r\n            newSelectedrowIds = [];\r\n        }\r\n\r\n        setSelectedrowIds(newSelectedrowIds);\r\n    };\r\n\r\n    const handleSelectOne = (event, id) => {\r\n        const selectedIndex = selectedrowIds.indexOf(id);\r\n        let newSelectedrowIds = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelectedrowIds = newSelectedrowIds.concat(selectedrowIds, id);\r\n        } else if (selectedIndex === 0) {\r\n            newSelectedrowIds = newSelectedrowIds.concat(selectedrowIds.slice(1));\r\n        } else if (selectedIndex === selectedrowIds.length - 1) {\r\n            newSelectedrowIds = newSelectedrowIds.concat(selectedrowIds.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelectedrowIds = newSelectedrowIds.concat(\r\n                selectedrowIds.slice(0, selectedIndex),\r\n                selectedrowIds.slice(selectedIndex + 1)\r\n            );\r\n        }\r\n\r\n        setSelectedrowIds(newSelectedrowIds);\r\n    };\r\n\r\n    const handleLimitChange = (event) => {\r\n        setPage(0);\r\n        setLimit(event.target.value);\r\n    };\r\n\r\n    const handlePageChange = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    if (isLoading) {\r\n\r\n        // <Box sx={{\r\n        //     pt: 3,\r\n        //     justifyContent: \"center\",\r\n        //     display: \"flex\",\r\n        //     flexDirection: \"column\",\r\n        //     height: \"100%\",\r\n        //     alignItems: 'center'\r\n        // }}>\r\n        //     <CircularProgress color=\"primary\" />\r\n        // </Box>\r\n        var body = <TableSkeletonLoader pageSize={limit} columnLength={columns.length} />\r\n    } else {\r\n        var body = (\r\n            <>\r\n                <Box style={{ overflowX: 'auto' }}>\r\n                    <Table {...rest}>\r\n                        <TableHead style={{ display: 'table-header-group' }}>\r\n                            <TableRow>\r\n                                {expand &&\r\n                                    <TableCell padding=\"checkbox\" />\r\n                                }\r\n                                {/* <TableCell padding=\"checkbox\">\r\n                                <Checkbox\r\n                                    checked={selectedrowIds.length === rows.length}\r\n                                    color=\"primary\"\r\n                                    indeterminate={\r\n                                        selectedrowIds.length > 0\r\n                                        && selectedrowIds.length < rows.length\r\n                                    }\r\n                                    onChange={handleSelectAll}\r\n                                />\r\n                            </TableCell> */}\r\n                                {columns.map((column, id) => (\r\n                                    <TableCell key={id}>\r\n                                        {column.headerName}\r\n                                    </TableCell>\r\n                                ))}\r\n                                {!!Object.keys(actions).length &&\r\n                                    <TableCell align=\"center\" sx={{ width: 50 }} />\r\n                                }\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows.slice(page * limit, page * limit + limit).map((row, id) => (\r\n                                <Row\r\n                                    key={id}\r\n                                    row={row}\r\n                                    updateRow={updateRow}\r\n                                    columns={columns}\r\n                                    additionalData={additionalData}\r\n                                    selectedrowIds={selectedrowIds}\r\n                                    handleSelectOne={handleSelectOne}\r\n                                    id={id}\r\n                                    actions={actions}\r\n                                    customActions={customActions}\r\n                                    expand={expand}\r\n                                    removerow={removerow}\r\n                                    setConformation={setConformation}\r\n                                />\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </Box>\r\n                {pagination &&\r\n                    <TablePagination\r\n                        component=\"div\"\r\n                        count={rows.length}\r\n                        onPageChange={handlePageChange}\r\n                        onRowsPerPageChange={handleLimitChange}\r\n                        page={page}\r\n                        rowsPerPage={limit}\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <Card sx={{ mt: 2 }}>\r\n            {!!title &&\r\n                <Box\r\n                    mx={0}\r\n                    // mt={-3}\r\n                    py={1.5}\r\n                    px={2}\r\n                    variant=\"gradient\"\r\n                    bgColor=\"info\"\r\n                    borderRadius=\"lg\"\r\n                    coloredShadow=\"info\"\r\n                    sx={{ borderRadius: '0.5rem 0.5rem 0 0' }}\r\n                >\r\n                    <Typography variant=\"h6\" color=\"white\">\r\n                        {title}\r\n                    </Typography>\r\n                </Box>}\r\n            {isLoading ? <TableSkeletonLoader pageSize={limit} columnLength={columns.length} /> :\r\n                <>\r\n                    {rows.length > 0 ?\r\n                        <Box style={{ overflowX: 'auto' }}>\r\n                            <Table {...rest}>\r\n                                <TableHead style={{ display: 'table-header-group' }}>\r\n                                    <TableRow>\r\n                                        {expand &&\r\n                                            <TableCell padding=\"checkbox\" />\r\n                                        }\r\n                                        {/* <TableCell padding=\"checkbox\">\r\n                                <Checkbox\r\n                                    checked={selectedrowIds.length === rows.length}\r\n                                    color=\"primary\"\r\n                                    indeterminate={\r\n                                        selectedrowIds.length > 0\r\n                                        && selectedrowIds.length < rows.length\r\n                                    }\r\n                                    onChange={handleSelectAll}\r\n                                />\r\n                            </TableCell> */}\r\n                                        {columns.map((column, id) => (\r\n                                            <TableCell key={id}>\r\n                                                {column.headerName}\r\n                                            </TableCell>\r\n                                        ))}\r\n                                        {!!Object.keys(actions).length &&\r\n                                            <TableCell align=\"center\" sx={{ width: 50 }} />\r\n                                        }\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {rows.slice(page * limit, page * limit + limit).map((row, id) => (\r\n                                        <Row\r\n                                            key={id}\r\n                                            row={row}\r\n                                            updateRow={updateRow}\r\n                                            columns={columns}\r\n                                            additionalData={additionalData}\r\n                                            selectedrowIds={selectedrowIds}\r\n                                            handleSelectOne={handleSelectOne}\r\n                                            id={id}\r\n                                            actions={actions}\r\n                                            customActions={customActions}\r\n                                            expand={expand}\r\n                                            removerow={removerow}\r\n                                            setConformation={setConformation}\r\n                                        />\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Box>\r\n                        :\r\n                        <Box\r\n                            component=\"img\"\r\n                            src=\"/static/No_Data.png\"\r\n                            sx={{ height: 260, mx: 'auto' }}\r\n                        />\r\n                    }\r\n\r\n                    {pagination &&\r\n                        <TablePagination\r\n                            component=\"div\"\r\n                            count={rows.length}\r\n                            onPageChange={handlePageChange}\r\n                            onRowsPerPageChange={handleLimitChange}\r\n                            page={page}\r\n                            rowsPerPage={limit}\r\n                            rowsPerPageOptions={[5, 10, 25]}\r\n                        />\r\n                    }\r\n                </>\r\n            }\r\n            <Conformation properties={conformation} onClose={handleConformationClose} />\r\n        </Card>\r\n    );\r\n\r\n    // if (tableOnly) {\r\n    //     return <TableComponent />\r\n    // } else {\r\n    //     return (\r\n    //         <Card {...rest}>\r\n    //             <PerfectScrollbar>\r\n    //                 <Box sx={{ minWidth: 1050 }}>\r\n    //                     <TableComponent />\r\n    //                 </Box>\r\n    //             </PerfectScrollbar>\r\n    //             <TablePagination\r\n    //                 component=\"div\"\r\n    //                 count={rows.length}\r\n    //                 onPageChange={handlePageChange}\r\n    //                 onRowsPerPageChange={handleLimitChange}\r\n    //                 page={page}\r\n    //                 rowsPerPage={limit}\r\n    //                 rowsPerPageOptions={[5, 10, 25]}\r\n    //             />\r\n    //         </Card>\r\n    //     );\r\n    // };\r\n}\r\n\r\nTable.propTypes = {\r\n    //columns: PropTypes.array.isRequired\r\n};\r\n\r\nexport default DatTable;","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Loader\\SkeltonLoader\\TableSkeletonLoader.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\DataTable\\Conformation.js",["336"],"import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Typography from '@mui/material/Typography';\r\nimport Slide from '@mui/material/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function Conformation({ properties: { title = \"Conform\", show, message = \"\", onSuccess }, onClose }) {\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                onClose={onClose}\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n                open={show}\r\n                TransitionComponent={Transition}\r\n            >\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={onClose} color='white' sx={{ backgroundColor: 'background.danger' }} >\r\n                    {title}\r\n                </DialogTitle >\r\n                <DialogContent dividers>\r\n                    <DialogContentText gutterBottom align=\"center\" sx={{ px: 5, py: 1 }}>\r\n                        Are you sure?\r\n                        <br />\r\n                        {message}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={onSuccess} color='primary'>\r\n                        Conform\r\n                    </Button>\r\n                    <Button onClick={onClose} color='error'>\r\n                        Cancel\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div >\r\n    );\r\n}\r\n","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\DataTable\\Row.js",["337"],"import { useState } from 'react'\r\nimport {\r\n    Checkbox,\r\n    TableCell,\r\n    TableRow,\r\n    IconButton,\r\n    Typography\r\n} from '@mui/material';\r\nimport KeyboardArrowRightIcon from '@mui/icons-material/KeyboardArrowRight';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport Action from './Action'\r\nimport CustomTable from './DataTable';\r\n\r\nconst Row = ({ row, updateRow, columns, selectedrowIds, handleSelectOne, id, actions, customActions, expand, additionalData, removerow, setConformation }) => {\r\n    const [isExpanded, setIsExpanded] = useState(false);\r\n    return <>\r\n        <TableRow\r\n            hover\r\n            selected={selectedrowIds.indexOf(row.id) !== -1}\r\n            sx={isExpanded ? { '& > *': { borderBottom: 'unset' } } : {}}\r\n        >\r\n            {expand &&\r\n                <TableCell padding=\"checkbox\" >\r\n                    <IconButton onClick={() => setIsExpanded(!isExpanded)} size=\"large\">\r\n                        {isExpanded ? <KeyboardArrowDownIcon /> : <KeyboardArrowRightIcon />}\r\n                    </IconButton>\r\n                </TableCell>\r\n            }\r\n            {/* <TableCell padding=\"checkbox\">\r\n                <Checkbox\r\n                    checked={selectedrowIds.indexOf(row.id) !== -1}\r\n                    onChange={(event) => handleSelectOne(event, row.id)}\r\n                    value=\"true\"\r\n                />\r\n            </TableCell> */}\r\n            {columns.map((column, id) => (\r\n                <TableCell key={id}>\r\n                    {column.render\r\n                        ? (\r\n                            column.render(row, additionalData, id)\r\n                        )\r\n                        : column.valueGetter\r\n                            ? (\r\n                                column.valueGetter(row, additionalData, id)\r\n                            )\r\n                            : (\r\n                                row[column.field]\r\n                            )\r\n                    }\r\n                </TableCell>\r\n            ))}\r\n            {!!Object.keys(actions).length &&\r\n                <TableCell sx={{ py: 0 }}>\r\n                    <Action\r\n                        item={row}\r\n                        updateRow={updateRow}\r\n                        id={id}\r\n                        actions={actions}\r\n                        customActions={customActions}\r\n                        additionalData={additionalData}\r\n                        removerow={removerow}\r\n                        setConformation={setConformation}\r\n                    />\r\n                </TableCell>\r\n            }\r\n        </TableRow>\r\n        {isExpanded && (\r\n            <TableRow>\r\n                <TableCell colSpan={columns.length + 3}>\r\n                    {expand.heading &&\r\n                        <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                            {expand.heading(row)}\r\n                        </Typography>\r\n                    }\r\n                    <CustomTable\r\n                        columns={expand.columns}\r\n                        additionalData={row}\r\n                        rows={row[expand.field]}\r\n                        actions={expand.actions}\r\n                        pagination={false}\r\n                        size=\"small\"\r\n                    />\r\n                </TableCell>\r\n            </TableRow>\r\n        )}\r\n    </>;\r\n}\r\n\r\nexport default Row;","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\context\\ToastContext.js",["338","339"],"import { createContext, useContext, useEffect, useState } from 'react'\r\nimport Button from '@mui/material/Button';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport Slide from '@mui/material/Slide';\r\n\r\nfunction SlideTransition(props) {\r\n    return <Slide {...props} direction=\"up\" />;\r\n}\r\n\r\nconst ToastContext = createContext();\r\n\r\nexport function useToast() {\r\n    return useContext(ToastContext)\r\n}\r\n\r\nexport function ToastProvider({ children }) {\r\n    const [open, setOpen] = useState(false);\r\n    const [message, setMessage] = useState(\"\")\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    const action = (\r\n        <>\r\n            {/* <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\r\n                UNDO\r\n            </Button> */}\r\n            <IconButton\r\n                size=\"small\"\r\n                aria-label=\"close\"\r\n                color=\"inherit\"\r\n                onClick={handleClose}\r\n            >\r\n                <CloseIcon fontSize=\"small\" />\r\n            </IconButton>\r\n        </>\r\n    );\r\n\r\n    const toastMessage = (message) => {\r\n        setOpen(false)\r\n        setTimeout(() => {\r\n            setMessage(message)\r\n            setOpen(true)\r\n        }, 5)\r\n    }\r\n\r\n    const value = {\r\n        toastMessage\r\n    }\r\n\r\n    return (\r\n        <ToastContext.Provider value={value} >\r\n            {children}\r\n\r\n            <Snackbar\r\n                open={open}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose}\r\n                message={message}\r\n                action={action}\r\n                TransitionComponent={SlideTransition}\r\n            />\r\n        </ToastContext.Provider>\r\n    )\r\n}","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\DataTable\\Action.js",["340"],"import { Icon } from '@iconify/react';\r\nimport { Fragment, useState } from 'react';\r\nimport editFill from '@iconify/icons-eva/edit-fill';\r\nimport { NavLink } from 'react-router-dom';\r\nimport trash2Outline from '@iconify/icons-eva/trash-2-outline';\r\nimport viewFill from '@iconify/icons-eva/book-open-fill';\r\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\r\n// material\r\nimport { Menu, MenuItem, IconButton, ListItemIcon, ListItemText, Divider } from '@mui/material';\r\nimport { useUserState } from 'context/UserContext';\r\nimport { useToast } from 'context/ToastContext';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst ITEM_HEIGHT = 48;\r\n\r\nexport default function Action({ item, updateRow, id, actions: { viewRoute, editRoute, onViewClick, onDelClick, onEditClick }, removerow, customActions, additionalData, setConformation }) {\r\n    const { customFetch } = useUserState()\r\n    const { toastMessage } = useToast()\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const open = Boolean(anchorEl);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleDelClick = () => {\r\n        handleClose()\r\n        setConformation({\r\n            title: \"Conform the Deletion\", message: \"Do you really want to delete these records? This process cannot be undone.\", show: true, onSuccess: () => {\r\n                removerow(item, additionalData, id, () => {\r\n                    setConformation(confirmation => ({ ...confirmation, show: false, onSuccess: null }))\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleCustomActionClick = (action, actionId) => {\r\n        handleClose()\r\n        // const localUpdateRow = row => {\r\n        //     handleClose()\r\n        //     updateRow(id, row)\r\n        // }\r\n\r\n        const success = () => {\r\n            if (action.onClick && typeof action.onClick === 'function') {\r\n                action.onClick(item, id, (row) => {\r\n                    setConformation({ title: null, message: null, show: false, onSuccess: null })\r\n                    updateRow(id, row)\r\n                })\r\n            } else {\r\n                const apiURL = action.url(item, additionalData, id);\r\n                if (action.body && typeof action.body === 'function') {\r\n                    var body = { body: JSON.stringify(action.body(item, additionalData, id)) }\r\n                } else {\r\n                    var body = {}\r\n                }\r\n                customFetch(apiURL.startsWith('/') ? apiURL : '/' + apiURL, {\r\n                    method: action.method || 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    ...body\r\n                }).then(() => {\r\n                    setConformation({ title: null, message: null, show: false, onSuccess: null })\r\n                    const newRow = (action.rowAfterSuccess && typeof action.rowAfterSuccess === 'function') ? action.rowAfterSuccess(item, additionalData, id) : item\r\n                    updateRow(id, newRow)\r\n                })\r\n                    .catch(console.log)\r\n            }\r\n            if (action.successMessage && typeof action.successMessage === 'function') {\r\n                toastMessage(action.successMessage(item, additionalData, id))\r\n            }\r\n        }\r\n        if (action.conformation) {\r\n            const title = (typeof action.conformation.title === 'function') ? action.conformation.title(item, additionalData, id) : typeof action.conformation.title === 'string' ? action.conformation.title : \"Confirm Action\";\r\n            const message = (typeof action.conformation.message === 'function') ? action.conformation.message(item, additionalData, id) : typeof action.conformation.message === 'string' ? action.conformation.message : \"Confirm Action\";\r\n            setConformation({\r\n                title, message, show: true, onSuccess: () => {\r\n                    success()\r\n                }\r\n            })\r\n        } else {\r\n            success()\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <IconButton aria-label=\"more\"\r\n                id=\"long-button\"\r\n                aria-controls=\"long-menu\"\r\n                aria-expanded={open ? 'true' : undefined}\r\n                aria-haspopup=\"true\"\r\n                onClick={handleClick}\r\n                size=\"large\"\r\n            >\r\n                <Icon icon={moreVerticalFill} width={20} height={20} />\r\n            </IconButton>\r\n\r\n            <Menu\r\n                id=\"long-menu\"\r\n                MenuListProps={{\r\n                    'aria-labelledby': 'long-button',\r\n                }}\r\n                anchorEl={anchorEl}\r\n                open={open}\r\n                onClose={handleClose}\r\n                PaperProps={{\r\n                    elevation: 0,\r\n                    sx: {\r\n                        border: 0\r\n                    },\r\n                    style: {\r\n                        maxHeight: ITEM_HEIGHT * 4.5,\r\n                        width: '20ch',\r\n                    },\r\n                }}\r\n                transformOrigin={{ horizontal: 'right', vertical: 'top' }}\r\n                anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\r\n                getContentAnchorEl={null}\r\n            >\r\n                {viewRoute &&\r\n                    <MenuItem component={NavLink} to={viewRoute(item, additionalData, id)} sx={{ color: 'text.secondary' }}>\r\n                        <ListItemIcon>\r\n                            <Icon icon={viewFill} width={24} height={24} />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"View\" primaryTypographyProps={{ variant: 'body2' }} />\r\n                    </MenuItem>\r\n                }\r\n                {onViewClick &&\r\n                    <MenuItem onClick={() => { handleClose(); onViewClick(item, id) }} sx={{ color: 'text.secondary' }}>\r\n                        <ListItemIcon>\r\n                            <Icon icon={viewFill} width={24} height={24} />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"View\" primaryTypographyProps={{ variant: 'body2' }} />\r\n                    </MenuItem>\r\n                }\r\n                {editRoute &&\r\n                    <MenuItem component={NavLink} to={editRoute(item, additionalData, id)} sx={{ color: 'text.secondary' }}>\r\n                        <ListItemIcon>\r\n                            <Icon icon={editFill} width={24} height={24} />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Edit\" primaryTypographyProps={{ variant: 'body2' }} />\r\n                    </MenuItem>\r\n                }\r\n                {\r\n                    onEditClick &&\r\n                    <MenuItem sx={{ color: 'text.secondary' }} onClick={() => { handleClose(); onEditClick(item, additionalData, id) }}>\r\n                        <ListItemIcon>\r\n                            <Icon icon={editFill} width={24} height={24} />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Edit\" primaryTypographyProps={{ variant: 'body2' }} />\r\n                    </MenuItem>\r\n                }\r\n\r\n                <MenuItem sx={{ color: 'text.secondary' }} onClick={handleDelClick}>\r\n                    <ListItemIcon>\r\n                        <Icon icon={trash2Outline} width={24} height={24} />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Delete\" primaryTypographyProps={{ variant: 'body2' }} />\r\n                </MenuItem>\r\n                {customActions.reduce((acc, action, id) => {\r\n                    const renderedMenuItem = <MenuItem key={'com-' + id} onClick={() => handleCustomActionClick(action, id)}>\r\n                        <ListItemIcon>\r\n                            {/* <Icon icon={action.icon(item, additionalData, id) || 'carbon:status-change'} width={20} height={20} /> */}\r\n                            {action.icon(item, additionalData, id)}\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={action.label(item, additionalData, id)} primaryTypographyProps={{ variant: 'body2' }} />\r\n                    </MenuItem>\r\n\r\n                    return [\r\n                        ...acc,\r\n                        <Divider key={'divider-' + id} />,\r\n                        ...action.to ? [<NavLink key={'com-' + id} style={{ cursor: 'pointer', color: 'unset' }} to={action.to(item, additionalData, id)}>\r\n                            {renderedMenuItem}\r\n                        </NavLink>]\r\n                            : [renderedMenuItem]\r\n                    ]\r\n                }, [])\r\n                }\r\n            </Menu>\r\n        </>\r\n    );\r\n}\r\n","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\measurements\\Table.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\measurements\\Add.js",["341"],"import React, { useState, useMemo } from \"react\";\r\n\r\nimport * as Yup from 'yup';\r\n\r\nimport Form from \"components/Form\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\n\r\nimport useEditData from \"hooks/useEditData\"\r\n\r\nconst Add = () => {\r\n    const { id } = useParams()\r\n\r\n    const [loading, setLoading] = useState(!!id)\r\n    const [values, setValues] = useState({\r\n        name: '',\r\n        value: '',\r\n        details: '',\r\n        status: true,\r\n    })\r\n\r\n\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        name: Yup.string()\r\n            .required(\"Apartment code is required\"),\r\n        value: Yup.string()\r\n            .required(\"Name is required\"),\r\n        // status: Yup.boolean()\r\n        //     .required(\"Status is required\")\r\n\r\n    })\r\n\r\n    const formItems = [\r\n        {\r\n            name: \"name\",\r\n            label: \"Name\",\r\n            required: true\r\n        },\r\n        {\r\n            name: \"value\",\r\n            label: \"Value\",\r\n            required: true\r\n        },\r\n        {\r\n            name: \"details\",\r\n            label: \"Details\",\r\n        },\r\n        {\r\n            name: \"status\",\r\n            label: \"Status\",\r\n            required: true,\r\n            check: true\r\n        },\r\n    ]\r\n\r\n    useEditData(\r\n        id && '/measurements/' + id,\r\n        details => {\r\n            if (id) {\r\n                setValues(details)\r\n                setLoading(false)\r\n            }\r\n        }\r\n    )\r\n\r\n    const history = useHistory()\r\n    const handlers = {\r\n        formData: (data) => data,\r\n        afterSubmit: () => {\r\n            history.push(`/app/measurements`)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            formItems={formItems}\r\n            loading={loading}\r\n            validationSchema={validationSchema}\r\n            method={id ? 'PUT' : 'POST'}\r\n            action={id ? '/measurements/' + id : '/measurements'}\r\n            values={values}\r\n            title={id ? 'Edit Measurement' : 'Add Measurement'}\r\n            handlers={handlers}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Add","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Form\\index.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Form\\Form.js",["342","343","344","345","346","347"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, FormikProvider, useFormik } from 'formik';\r\nimport Input from \"./Input\";\r\nimport {\r\n    Box,\r\n    Card,\r\n    Grid,\r\n    Stack,\r\n    Typography,\r\n    Button,\r\n    Alert\r\n} from '@mui/material';\r\nimport { useUserState } from \"context/UserContext\";\r\nimport { InputSkelton, ButtonSkelton } from \"components/Loader/SkeltonLoader\";\r\nimport { useToast } from \"context/ToastContext\";\r\n\r\nconst MDForm = (props) => {\r\n    const {\r\n        children,\r\n        action,\r\n        method = \"POST\",\r\n        loading,\r\n        validationSchema,\r\n        formItems = [],\r\n        values: formValues = {},\r\n        setValues,\r\n        title = 'Form',\r\n        subTitle,\r\n        handlers: { formData = (data) => data, afterSubmit, verify = () => true } = {},\r\n        autoComplete = \"on\",\r\n        successMessage,\r\n        setData = () => null,\r\n        changingField = '',\r\n        pt = 3,\r\n    } = props;\r\n\r\n    const { customFetch } = useUserState()\r\n    const [error, setError] = useState(false)\r\n\r\n    const { toastMessage } = useToast()\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: formValues,\r\n        validationSchema: validationSchema,\r\n        onSubmit: (values, { setSubmitting }) => {\r\n            const data = formData(values)\r\n            setSubmitting(true)\r\n            setError(false)\r\n            if (!verify(data)) return setSubmitting(false)\r\n            customFetch(action, {\r\n                method: method,\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(data)\r\n            })\r\n                .then((response) => {\r\n                    if (response.status === 201 || response.status === 200) {\r\n                        setSubmitting(false)\r\n                        if (successMessage) {\r\n                            toastMessage(successMessage)\r\n                        }\r\n                        resetForm()\r\n                        afterSubmit(data)\r\n                    } else {\r\n                        setError(true)\r\n                        setSubmitting(false)\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    setError(true)\r\n                    setSubmitting(false)\r\n                })\r\n        }\r\n    })\r\n    useEffect(() => {\r\n        if (formValues) {\r\n            Object.keys(formValues).forEach((key) => {\r\n                setFieldValue(key, formValues[key]);\r\n            });\r\n        }\r\n    }, [formValues])\r\n\r\n    const { errors, touched, values, isSubmitting, setSubmitting, handleChange, handleSubmit, setFieldValue, getFieldProps, resetForm } = formik;\r\n\r\n    const handleValueChange = e => {\r\n        handleChange(e)\r\n        typeof setValues === 'function' && setValues(({ ...values }) => {\r\n            values[e.target.name] = e.target.value\r\n            return values\r\n        })\r\n    }\r\n    useEffect(() => {\r\n        setData(values)\r\n    }, [values[changingField]])\r\n\r\n    return (\r\n        <FormikProvider value={formik} >\r\n            <Form autoComplete={autoComplete} onSubmit={handleSubmit}>\r\n                <Box pt={6} pb={3}>\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <Card>\r\n                                <Box\r\n                                    mx={0}\r\n                                    // mt={-3}\r\n                                    py={1.5}\r\n                                    px={2}\r\n                                    variant=\"gradient\"\r\n                                    bgColor=\"info\"\r\n                                    borderRadius=\"lg\"\r\n                                    coloredShadow=\"info\"\r\n                                    sx={{ borderRadius: '0.5rem 0.5rem 0 0' }}\r\n                                >\r\n                                    <Typography variant=\"h6\">\r\n                                        {title}\r\n                                    </Typography>\r\n                                </Box>\r\n\r\n                                <Box pt={pt}>\r\n                                    {error &&\r\n                                        <Stack px={2}>\r\n                                            <Alert color='error' sx={{ width: '100%' }} >Oops! Something went wrong.</Alert>\r\n                                        </Stack>\r\n                                    }\r\n                                    <Stack spacing={3} p={2}>\r\n                                        {subTitle}\r\n                                        <Grid container spacing={2}>\r\n                                            {formItems.map(({ fullwidth, ...rest }, id) => (\r\n                                                <Grid item md={fullwidth ? 12 : 6} xs={12} sm={12} key={id}>\r\n                                                    {loading\r\n                                                        ? <InputSkelton key={id} multi={rest.multiline} />\r\n                                                        : <Input key={id} value={values[rest.name]} onChange={handleValueChange} {...rest} formik={formik} getFieldProps={getFieldProps} values={values} setFieldValue={setFieldValue} />}\r\n                                                </Grid>\r\n                                            ))}\r\n                                        </Grid>\r\n                                    </Stack>\r\n\r\n                                    {!loading && children}\r\n\r\n                                    <Box sx={{ mt: 1, display: 'flex', justifyContent: 'flex-end', p: 2 }}>\r\n                                        {loading ?\r\n                                            <ButtonSkelton />\r\n                                            : <Button variant=\"contained\" color='success' type=\"submit\" disabled={isSubmitting} >\r\n                                                Save Changes\r\n                                            </Button>\r\n                                        }\r\n\r\n                                    </Box>\r\n                                </Box>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </Form>\r\n        </FormikProvider>\r\n    )\r\n}\r\nexport default MDForm","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Form\\Input.js",["348","349","350","351","352","353","354"],"import React, { useState } from \"react\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport Divider from '@mui/material/Divider';\r\nimport Chip from '@mui/material/Chip';\r\nimport { Grid, MenuItem, Stack, Typography } from '@mui/material';\r\nimport {\r\n    IconButton,\r\n    InputAdornment,\r\n    Button,\r\n    Box\r\n} from \"@mui/material\";\r\nimport MDInput from \"./formInput\";\r\n\r\nimport { Icon } from \"@iconify/react\";\r\nimport eyeFill from \"@iconify/icons-eva/eye-fill\";\r\nimport eyeOffFill from \"@iconify/icons-eva/eye-off-fill\";\r\nimport { getIn, FieldArray } from 'formik';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { FormHelperText } from '@mui/material';\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\n\r\n\r\nconst FormInput = ({ name, label, type, error, check, helperText, getFieldProps, setFieldValue, formik, value, values, handleChange, isFullWidth = true, special, autoComplete, ...props }) => {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const handleShowPassword = () => setShowPassword(!showPassword);\r\n\r\n    if (type === 'divider' || type === 'heading') {\r\n        var body = (\r\n            <>\r\n                {type === 'divider' && <Box sx={{ my: 2 }}>\r\n                    <Divider />\r\n                </Box>}\r\n                {label && <Typography sx={{ ml: 2 }} variant=\"h6\">{label}</Typography>}\r\n            </>\r\n        )\r\n    } else if (special) {\r\n        var body = (\r\n            <FieldArray\r\n                name={name}\r\n                render={arrayHelpers => (\r\n                    <div>\r\n                        {\r\n                            props.dependfield ?\r\n                                values[props.dependfield] &&\r\n                                <Button type=\"button\" variant=\"outlined\" color='info' onClick={() => arrayHelpers.push(props.newfloor)} sx={{ mb: 2 }}>\r\n                                    {props.buttontext}\r\n                                </Button>\r\n                                :\r\n                                <Button type=\"button\" variant=\"outlined\" color='info' onClick={() => arrayHelpers.push(props.newfloor)} sx={{ mb: 2 }}>\r\n                                    {props.buttontext}\r\n                                </Button>\r\n                        }\r\n                        {\r\n                            // value && value.length > 0 ? (\r\n                            (props.dependfield ? values[props.dependfield] : true) ?\r\n                                value.map((floor, index) => (\r\n                                    <div key={index}>\r\n                                        <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }} sx={{ mb: 2 }}>\r\n                                            {\r\n                                                props.fields.map((field, id) => {\r\n                                                    return (\r\n                                                        <Grid item md={4} key={id} >\r\n                                                            {\r\n                                                                field.check ?\r\n\r\n                                                                    <div key={id}>\r\n                                                                        <Switch checked={floor.status} name={`${name}.${index}.${field.name}`} {...getFieldProps(`${name}.${index}.${field.name}`)} size='medium' />\r\n                                                                        <Typography\r\n                                                                            variant=\"button\"\r\n                                                                            fontWeight=\"regular\"\r\n                                                                            color=\"text\"\r\n                                                                            sx={{ cursor: \"pointer\", userSelect: \"none\", ml: -1 }}\r\n                                                                        >\r\n                                                                            &nbsp;&nbsp;{field.label}\r\n                                                                        </Typography>\r\n                                                                    </div>\r\n\r\n                                                                    :\r\n\r\n                                                                    <div key={id}>\r\n                                                                        <MDInput\r\n                                                                            type={showPassword ? 'text' : type}\r\n                                                                            rows={field.rows}\r\n                                                                            select={field.select}\r\n                                                                            label={field.label}\r\n                                                                            name={`${name}.${index}.${field.name}`}\r\n                                                                            fullWidth={isFullWidth}\r\n                                                                            {...getFieldProps(`${name}.${index}.${field.name}`)}\r\n                                                                            error={Boolean(getIn(formik.touched, `${`${name}.${index}.${field.name}`}`) && getIn(formik.errors, `${name}.${index}.${field.name}`))}\r\n                                                                            // helperText={getIn(formik.touched,`${name}.${index}.${field.name}`) && getIn(formik.errors,`${name}.${index}.${field.name}`)}\r\n                                                                            InputProps={{\r\n                                                                                endAdornment: (\r\n                                                                                    type == 'password' &&\r\n                                                                                    <InputAdornment position=\"end\">\r\n                                                                                        <IconButton onClick={handleShowPassword} edge=\"end\">\r\n                                                                                            <Icon icon={showPassword ? eyeFill : eyeOffFill} />\r\n                                                                                        </IconButton>\r\n                                                                                    </InputAdornment>\r\n                                                                                ),\r\n                                                                                style: {\r\n                                                                                    height: field.select ? '44.13px' : ''\r\n                                                                                }\r\n                                                                            }}\r\n                                                                            SelectProps={{\r\n                                                                                multiple: field.multiple\r\n                                                                            }}\r\n                                                                            {...props}\r\n                                                                        >\r\n                                                                            {field.select && field.options?.map(({ value, label, ...props }, id) => (\r\n                                                                                <MenuItem key={value} value={value} {...props}>\r\n                                                                                    {label}\r\n                                                                                </MenuItem>\r\n                                                                            ))}\r\n                                                                        </MDInput>\r\n                                                                        <FormHelperText error={Boolean(getIn(formik.touched, `${`${name}.${index}.${field.name}`}`) && getIn(formik.errors, `${name}.${index}.${field.name}`))} sx={{ px: 2 }} >\r\n                                                                            {getIn(formik.touched, `${name}.${index}.${field.name}`) && getIn(formik.errors, `${name}.${index}.${field.name}`)}\r\n                                                                        </FormHelperText>\r\n                                                                    </div>\r\n\r\n                                                            }\r\n                                                        </Grid>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                            <IconButton aria-label=\"delete\" size=\"large\" onClick={() => arrayHelpers.remove(index)} key={index}>\r\n                                                <DeleteIcon fontSize=\"inherit\" color=\"error\" />\r\n                                            </IconButton>\r\n                                            {/* <IconButton aria-label=\"delete\" size=\"large\" onClick={() => arrayHelpers.insert(index, props.newfloor)}>\r\n                                                <AddIcon fontSize=\"inherit\" color=\"info\" />\r\n                                            </IconButton> */}\r\n                                        </Stack>\r\n                                    </div>\r\n                                ))\r\n                                //) \r\n                                // : (\r\n                                //     <Button type=\"button\" variant=\"outlined\" color='info' onClick={() => arrayHelpers.push(props.newfloor)}>\r\n                                //         {props.buttontext}\r\n                                //     </Button>\r\n                                // )\r\n                                :\r\n                                null\r\n                        }\r\n                    </div>\r\n                )}\r\n            />\r\n        )\r\n    } else if (check) {\r\n        var body = (\r\n            <>\r\n                <Switch checked={value} name={name} onChange={handleChange} {...getFieldProps({ name })} />\r\n                <Typography\r\n                    variant=\"button\"\r\n                    fontWeight=\"regular\"\r\n                    color=\"text\"\r\n                    sx={{ cursor: \"pointer\", userSelect: \"none\", ml: -1 }}\r\n                >\r\n                    &nbsp;&nbsp;{label}\r\n                </Typography>\r\n            </>\r\n        )\r\n    } else if (autoComplete) {\r\n        var body = (\r\n            <>\r\n                <Autocomplete\r\n                    options={props.options}\r\n                    onChange={(event, value) => setFieldValue(name, value?._id)}\r\n                    getOptionLabel={(option) => option.code + ' ' + option.firstname}\r\n                    renderInput={(params) =>\r\n                        <MDInput {...params} label={label} variant=\"outlined\"\r\n                            {\r\n                            ...getFieldProps(name)}\r\n                            name={name}\r\n                            error={Boolean(getIn(formik.touched, `${name}`) && getIn(formik.errors, `${name}`))}\r\n                        />\r\n                    }\r\n                />\r\n                <FormHelperText error={Boolean(getIn(formik.touched, `${name}`) && getIn(formik.errors, `${name}`))} sx={{ px: 2 }}>\r\n                    {getIn(formik.touched, `${name}`) && getIn(formik.errors, `${name}`)}\r\n                </FormHelperText>\r\n            </>\r\n        )\r\n    } else {\r\n        var body = (\r\n            <>\r\n                <MDInput\r\n                    type={showPassword ? 'text' : type}\r\n                    rows={props.rows}\r\n                    select={props.select}\r\n                    label={label}\r\n                    name={name}\r\n                    fullWidth={isFullWidth}\r\n                    {...getFieldProps({ name })}\r\n                    error={Boolean(getIn(formik.touched, `${name}`) && getIn(formik.errors, `${name}`))}\r\n                    // helperText={getIn(formik.touched,`${name}`) && getIn(formik.errors,`${name}`)}\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            type == 'password' &&\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton onClick={handleShowPassword} edge=\"end\">\r\n                                    <Icon icon={showPassword ? eyeFill : eyeOffFill} />\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        ),\r\n                        style: {\r\n                            height: props.select ? '44.13px' : ''\r\n                        }\r\n                    }}\r\n                    SelectProps={{\r\n                        multiple: props.multiple\r\n                    }}\r\n                    autoComplete=\"new-password\"\r\n                    {...props}\r\n                >\r\n                    {props.select && props.options?.map(({ value, label, ...props }, id) => (\r\n                        <MenuItem key={value} value={value} {...props}>\r\n                            {label}\r\n                        </MenuItem>\r\n                    ))}\r\n                </MDInput>\r\n                <FormHelperText error={Boolean(getIn(formik.touched, `${name}`) && getIn(formik.errors, `${name}`))} sx={{ px: 2 }}>\r\n                    {getIn(formik.touched, `${name}`) && getIn(formik.errors, `${name}`)}\r\n                </FormHelperText>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12} sm={12}>\r\n            {body}\r\n        </Grid>\r\n    )\r\n}\r\nexport default FormInput","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Loader\\SkeltonLoader\\index.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Loader\\SkeltonLoader\\ButtonSkelton.js",["355","356","357"],"import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Skeleton from '@mui/material/Skeleton';\r\nimport { Stack, Grid } from '@mui/material';\r\n\r\nexport default function ButtonSkelton() {\r\n\r\n    return (\r\n        <Skeleton width={100} height={60} animation=\"wave\" />\r\n    );\r\n}\r\n","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Loader\\SkeltonLoader\\InputSkelton.js",["358","359"],"import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Skeleton from '@mui/material/Skeleton';\r\nimport { Stack, Grid } from '@mui/material';\r\n\r\nexport default function InputSkelton({ multi }) {\r\n\r\n    return (\r\n        <Box sx={{ width: '100%' }}>\r\n            <Skeleton width='100%' height={multi ? '104px' : '44.13px'} animation=\"wave\" variant='text' />\r\n        </Box>\r\n    );\r\n}\r\n","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\hooks\\useFetch.js",["360","361"],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\hooks\\useEditData.js",["362"],"import { useEffect } from 'react';\r\nimport { useUserState } from 'context/UserContext';\r\n\r\nconst useEditData = (url, callback) => {\r\n    const { customFetch } = useUserState()\r\n\r\n    useEffect(() => {\r\n        if (!url) return\r\n        const abortCont = new AbortController();\r\n        customFetch(url, { signal: abortCont.signal })\r\n            .then(res => {\r\n                if (res.status !== 200 && res.status !== 304) {\r\n                    throw Error('could not fetch data')\r\n                }\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                callback(data);\r\n            })\r\n            .catch(err => {\r\n                if (err.name === 'AbortError') {\r\n                    console.log('Fetch aborted');\r\n                } else {\r\n                    console.log(err.message);\r\n                }\r\n            });\r\n        return () => abortCont.abort();\r\n    }, [url]);\r\n}\r\n\r\nexport default useEditData;","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Form\\formInput\\index.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\components\\Form\\formInput\\MDInputRoot.js",["363","364"],"\r\n\r\n// @mui material components\r\nimport TextField from \"@mui/material/TextField\";\r\nimport { styled } from \"@mui/material/styles\";\r\n\r\nconst colors = {\r\n  background: {\r\n    default: \"#f0f2f5\",\r\n  },\r\n\r\n  text: {\r\n    main: \"#7b809a\",\r\n    focus: \"#7b809a\",\r\n  },\r\n\r\n  transparent: {\r\n    main: \"transparent\",\r\n  },\r\n\r\n  white: {\r\n    main: \"#ffffff\",\r\n    focus: \"#ffffff\",\r\n  },\r\n\r\n  black: {\r\n    light: \"#000000\",\r\n    main: \"#000000\",\r\n    focus: \"#000000\",\r\n  },\r\n\r\n  primary: {\r\n    main: \"#e91e63\",\r\n    focus: \"#e91e63\",\r\n  },\r\n\r\n  secondary: {\r\n    main: \"#7b809a\",\r\n    focus: \"#8f93a9\",\r\n  },\r\n\r\n  info: {\r\n    main: \"#1A73E8\",\r\n    focus: \"#1662C4\",\r\n  },\r\n\r\n  success: {\r\n    main: \"#4CAF50\",\r\n    focus: \"#67bb6a\",\r\n  },\r\n\r\n  warning: {\r\n    main: \"#fb8c00\",\r\n    focus: \"#fc9d26\",\r\n  },\r\n\r\n  error: {\r\n    main: \"#F44335\",\r\n    focus: \"#f65f53\",\r\n  },\r\n\r\n  light: {\r\n    main: \"#f0f2f5\",\r\n    focus: \"#f0f2f5\",\r\n  },\r\n\r\n  dark: {\r\n    main: \"#344767\",\r\n    focus: \"#2c3c58\",\r\n  },\r\n\r\n  grey: {\r\n    100: \"#f8f9fa\",\r\n    200: \"#f0f2f5\",\r\n    300: \"#dee2e6\",\r\n    400: \"#ced4da\",\r\n    500: \"#adb5bd\",\r\n    600: \"#6c757d\",\r\n    700: \"#495057\",\r\n    800: \"#343a40\",\r\n    900: \"#212529\",\r\n  },\r\n\r\n  gradients: {\r\n    primary: {\r\n      main: \"#EC407A\",\r\n      state: \"#D81B60\",\r\n    },\r\n\r\n    secondary: {\r\n      main: \"#747b8a\",\r\n      state: \"#495361\",\r\n    },\r\n\r\n    info: {\r\n      main: \"#49a3f1\",\r\n      state: \"#1A73E8\",\r\n    },\r\n\r\n    success: {\r\n      main: \"#66BB6A\",\r\n      state: \"#43A047\",\r\n    },\r\n\r\n    warning: {\r\n      main: \"#FFA726\",\r\n      state: \"#FB8C00\",\r\n    },\r\n\r\n    error: {\r\n      main: \"#EF5350\",\r\n      state: \"#E53935\",\r\n    },\r\n\r\n    light: {\r\n      main: \"#EBEFF4\",\r\n      state: \"#CED4DA\",\r\n    },\r\n\r\n    dark: {\r\n      main: \"#42424a\",\r\n      state: \"#191919\",\r\n    },\r\n  },\r\n\r\n  socialMediaColors: {\r\n    facebook: {\r\n      main: \"#3b5998\",\r\n      dark: \"#344e86\",\r\n    },\r\n\r\n    twitter: {\r\n      main: \"#55acee\",\r\n      dark: \"#3ea1ec\",\r\n    },\r\n\r\n    instagram: {\r\n      main: \"#125688\",\r\n      dark: \"#0e456d\",\r\n    },\r\n\r\n    linkedin: {\r\n      main: \"#0077b5\",\r\n      dark: \"#00669c\",\r\n    },\r\n\r\n    pinterest: {\r\n      main: \"#cc2127\",\r\n      dark: \"#b21d22\",\r\n    },\r\n\r\n    youtube: {\r\n      main: \"#e52d27\",\r\n      dark: \"#d41f1a\",\r\n    },\r\n\r\n    vimeo: {\r\n      main: \"#1ab7ea\",\r\n      dark: \"#13a3d2\",\r\n    },\r\n\r\n    slack: {\r\n      main: \"#3aaf85\",\r\n      dark: \"#329874\",\r\n    },\r\n\r\n    dribbble: {\r\n      main: \"#ea4c89\",\r\n      dark: \"#e73177\",\r\n    },\r\n\r\n    github: {\r\n      main: \"#24292e\",\r\n      dark: \"#171a1d\",\r\n    },\r\n\r\n    reddit: {\r\n      main: \"#ff4500\",\r\n      dark: \"#e03d00\",\r\n    },\r\n\r\n    tumblr: {\r\n      main: \"#35465c\",\r\n      dark: \"#2a3749\",\r\n    },\r\n  },\r\n\r\n  badgeColors: {\r\n    primary: {\r\n      background: \"#f8b3ca\",\r\n      text: \"#cc084b\",\r\n    },\r\n\r\n    secondary: {\r\n      background: \"#d7d9e1\",\r\n      text: \"#6c757d\",\r\n    },\r\n\r\n    info: {\r\n      background: \"#aecef7\",\r\n      text: \"#095bc6\",\r\n    },\r\n\r\n    success: {\r\n      background: \"#bce2be\",\r\n      text: \"#339537\",\r\n    },\r\n\r\n    warning: {\r\n      background: \"#ffd59f\",\r\n      text: \"#c87000\",\r\n    },\r\n\r\n    error: {\r\n      background: \"#fcd3d0\",\r\n      text: \"#f61200\",\r\n    },\r\n\r\n    light: {\r\n      background: \"#ffffff\",\r\n      text: \"#c7d3de\",\r\n    },\r\n\r\n    dark: {\r\n      background: \"#8097bf\",\r\n      text: \"#1e2e4a\",\r\n    },\r\n  },\r\n\r\n  coloredShadows: {\r\n    primary: \"#e91e62\",\r\n    secondary: \"#110e0e\",\r\n    info: \"#00bbd4\",\r\n    success: \"#4caf4f\",\r\n    warning: \"#ff9900\",\r\n    error: \"#f44336\",\r\n    light: \"#adb5bd\",\r\n    dark: \"#404040\",\r\n  },\r\n\r\n  inputBorderColor: \"#d2d6da\",\r\n\r\n  tabs: {\r\n    indicator: { boxShadow: \"#ddd\" },\r\n  },\r\n};\r\n\r\nexport default styled(TextField)(({ theme, ownerState }) => {\r\n  const { palette, functions } = theme;\r\n  const { error, success, disabled } = ownerState;\r\n\r\n  const { grey, transparent, error: colorError, success: colorSuccess } = colors;\r\n\r\n  function pxToRem(number, baseNumber = 16) {\r\n    return `${number / baseNumber}rem`;\r\n  }\r\n\r\n  // styles for the input with error={true}\r\n  const errorStyles = () => ({\r\n    // backgroundImage:\r\n    //   \"url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none' stroke='%23F44335' viewBox='0 0 12 12'%3E%3Ccircle cx='6' cy='6' r='4.5'/%3E%3Cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3E%3Ccircle cx='6' cy='8.2' r='.6' fill='%23F44335' stroke='none'/%3E%3C/svg%3E\\\")\",\r\n    // backgroundRepeat: \"no-repeat\",\r\n    // backgroundPosition: `right ${pxToRem(12)} center`,\r\n    // backgroundSize: `${pxToRem(16)} ${pxToRem(16)}`,\r\n\r\n    \"& .MuiOutlinedInput-root\": {\r\n      \"& > fieldset\": {\r\n        borderColor: colorError.main\r\n      }\r\n    },\r\n\r\n    \"& .MuiOutlinedInput-root : hover\": {\r\n      \"& > fieldset\": {\r\n        borderColor: colorError.main\r\n      }\r\n    },\r\n\r\n    \"& .Mui-focused\": {\r\n      \"& .MuiOutlinedInput-notchedOutline, &:after\": {\r\n        borderColor: colorError.main,\r\n      },\r\n    },\r\n\r\n    \"&.MuiTextField-root\": {\r\n      borderColor: colorError.main,\r\n    },\r\n\r\n    \"& .MuiInputLabel-root.Mui-focused\": {\r\n      color: colorError.main,\r\n    },\r\n    \"& .MuiInputLabel-root\": {\r\n      color: colorError.main,\r\n    },\r\n    \"&.MuiFormHelperText-root.Mui-focused\": {\r\n      color: colorError.main,\r\n    }\r\n  });\r\n\r\n  // styles for the input with success={true}\r\n  const successStyles = () => ({\r\n    backgroundImage:\r\n      \"url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 10 8'%3E%3Cpath fill='%234CAF50' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3E%3C/svg%3E\\\")\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundPosition: `right ${pxToRem(12)} center`,\r\n    backgroundSize: `${pxToRem(16)} ${pxToRem(16)}`,\r\n\r\n    \"& .Mui-focused\": {\r\n      \"& .MuiOutlinedInput-notchedOutline, &:after\": {\r\n        borderColor: colorSuccess.main,\r\n      },\r\n    },\r\n\r\n    \"& .MuiInputLabel-root.Mui-focused\": {\r\n      color: colorSuccess.main,\r\n    },\r\n\r\n  });\r\n\r\n  return {\r\n    backgroundColor: disabled ? `${grey[200]} !important` : transparent.main,\r\n    pointerEvents: disabled ? \"none\" : \"auto\",\r\n    ...(error && errorStyles()),\r\n    ...(success && successStyles()),\r\n  };\r\n});\r\n","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\customers\\Table.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\customers\\Add.js",["365"],"import React, { useState, useMemo } from \"react\";\r\n\r\nimport * as Yup from 'yup';\r\n\r\nimport Form from \"components/Form\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\n\r\nimport useEditData from \"hooks/useEditData\"\r\n\r\nconst Add = () => {\r\n    const { id } = useParams()\r\n\r\n    const [loading, setLoading] = useState(!!id)\r\n    const [values, setValues] = useState({\r\n        id: '',\r\n        name: '',\r\n        contactNumber: '',\r\n        NIC: ''\r\n    })\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        id: Yup.string()\r\n            .required(\"Customer id is required\"),\r\n        name: Yup.string()\r\n            .required(\"Customer name is required\"),\r\n        contactNumber: Yup.string()\r\n            .required(\"Contact number is required\"),\r\n        NIC: Yup.string()\r\n            .required(\"NIC is required\"),\r\n    })\r\n\r\n    const formItems = [\r\n        {\r\n            name: \"id\",\r\n            label: \"Customer ID\",\r\n        },\r\n        {\r\n            name: \"name\",\r\n            label: \"Name\",\r\n        },\r\n        {\r\n            name: \"contactNumber\",\r\n            label: \"Contact Number\",\r\n        },\r\n        {\r\n            name: \"NIC\",\r\n            label: \"NIC\",\r\n        },\r\n    ]\r\n\r\n    useEditData(\r\n        id && '/customers/' + id,\r\n        details => {\r\n            if (id) {\r\n                setValues(details)\r\n                setLoading(false)\r\n            }\r\n        }\r\n    )\r\n\r\n    const history = useHistory()\r\n    const handlers = {\r\n        formData: (data) => data,\r\n        afterSubmit: () => {\r\n            history.push(`/app/customers`)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            formItems={formItems}\r\n            loading={loading}\r\n            validationSchema={validationSchema}\r\n            method={id ? 'PUT' : 'POST'}\r\n            action={id ? '/customers/' + id : '/customers'}\r\n            values={values}\r\n            title={id ? 'Edit Customer' : 'Add Customer'}\r\n            handlers={handlers}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Add","E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\tailors\\Tailors.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\tailors\\Table.js",[],"E:\\Project\\Quaxor-Freelancer\\Tailor\\ui\\src\\pages\\tailors\\Add.js",["366"],"import React, { useState, useMemo } from \"react\";\r\n\r\nimport * as Yup from 'yup';\r\n\r\nimport Form from \"components/Form\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\n\r\nimport useEditData from \"hooks/useEditData\"\r\n\r\nconst Add = () => {\r\n    const { id } = useParams()\r\n\r\n    const [loading, setLoading] = useState(!!id)\r\n    const [values, setValues] = useState({\r\n        id: '',\r\n        name: '',\r\n        contactNumber: '',\r\n        NIC: ''\r\n    })\r\n\r\n\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        id: Yup.string()\r\n            .required(\"Customer id is required\"),\r\n        name: Yup.string()\r\n            .required(\"Customer name is required\"),\r\n        contactNumber: Yup.string()\r\n            .required(\"Contact number is required\"),\r\n        NIC: Yup.string()\r\n            .required(\"NIC is required\"),\r\n    })\r\n\r\n    const formItems = [\r\n        {\r\n            name: \"id\",\r\n            label: \"Tailor ID\",\r\n        },\r\n        {\r\n            name: \"name\",\r\n            label: \"Name\",\r\n        },\r\n        {\r\n            name: \"contactNumber\",\r\n            label: \"Contact Number\",\r\n        },\r\n        {\r\n            name: \"NIC\",\r\n            label: \"NIC\",\r\n        },\r\n    ]\r\n\r\n    useEditData(\r\n        id && '/tailors/' + id,\r\n        details => {\r\n            if (id) {\r\n                setValues(details)\r\n                setLoading(false)\r\n            }\r\n        }\r\n    )\r\n\r\n    const history = useHistory()\r\n    const handlers = {\r\n        formData: (data) => data,\r\n        afterSubmit: () => {\r\n            history.push(`/app/tailors`)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            formItems={formItems}\r\n            loading={loading}\r\n            validationSchema={validationSchema}\r\n            method={id ? 'PUT' : 'POST'}\r\n            action={id ? '/tailors/' + id : '/tailors'}\r\n            values={values}\r\n            title={id ? 'Edit Tailor' : 'Add Tailor'}\r\n            handlers={handlers}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Add",{"ruleId":"367","severity":1,"message":"368","line":3,"column":25,"nodeType":"369","messageId":"370","endLine":3,"endColumn":45},{"ruleId":"371","replacedBy":"372"},{"ruleId":"373","replacedBy":"374"},{"ruleId":"367","severity":1,"message":"375","line":58,"column":12,"nodeType":"369","messageId":"370","endLine":58,"endColumn":23},{"ruleId":"367","severity":1,"message":"376","line":3,"column":23,"nodeType":"369","messageId":"370","endLine":3,"endColumn":35},{"ruleId":"367","severity":1,"message":"377","line":13,"column":8,"nodeType":"369","messageId":"370","endLine":13,"endColumn":18},{"ruleId":"367","severity":1,"message":"378","line":20,"column":8,"nodeType":"369","messageId":"370","endLine":20,"endColumn":14},{"ruleId":"371","replacedBy":"379"},{"ruleId":"373","replacedBy":"380"},{"ruleId":"367","severity":1,"message":"381","line":10,"column":3,"nodeType":"369","messageId":"370","endLine":10,"endColumn":7},{"ruleId":"367","severity":1,"message":"382","line":27,"column":29,"nodeType":"369","messageId":"370","endLine":27,"endColumn":35},{"ruleId":"383","severity":1,"message":"384","line":95,"column":3,"nodeType":"385","messageId":"386","endLine":468,"endColumn":7},{"ruleId":"367","severity":1,"message":"387","line":4,"column":8,"nodeType":"369","messageId":"370","endLine":4,"endColumn":20},{"ruleId":"367","severity":1,"message":"388","line":5,"column":5,"nodeType":"369","messageId":"370","endLine":5,"endColumn":13},{"ruleId":"367","severity":1,"message":"389","line":43,"column":12,"nodeType":"369","messageId":"370","endLine":43,"endColumn":17},{"ruleId":"390","severity":1,"message":"391","line":101,"column":8,"nodeType":"392","endLine":101,"endColumn":27,"suggestions":"393"},{"ruleId":"390","severity":1,"message":"394","line":107,"column":8,"nodeType":"392","endLine":107,"endColumn":15,"suggestions":"395"},{"ruleId":"390","severity":1,"message":"394","line":113,"column":8,"nodeType":"392","endLine":113,"endColumn":17,"suggestions":"396"},{"ruleId":"367","severity":1,"message":"397","line":115,"column":11,"nodeType":"369","messageId":"370","endLine":115,"endColumn":26},{"ruleId":"398","severity":1,"message":"399","line":170,"column":13,"nodeType":"369","messageId":"400","endLine":170,"endColumn":17},{"ruleId":"367","severity":1,"message":"401","line":170,"column":13,"nodeType":"369","messageId":"370","endLine":170,"endColumn":17},{"ruleId":"367","severity":1,"message":"402","line":8,"column":8,"nodeType":"369","messageId":"370","endLine":8,"endColumn":18},{"ruleId":"367","severity":1,"message":"388","line":3,"column":5,"nodeType":"369","messageId":"370","endLine":3,"endColumn":13},{"ruleId":"367","severity":1,"message":"403","line":1,"column":37,"nodeType":"369","messageId":"370","endLine":1,"endColumn":46},{"ruleId":"367","severity":1,"message":"382","line":2,"column":8,"nodeType":"369","messageId":"370","endLine":2,"endColumn":14},{"ruleId":"398","severity":1,"message":"399","line":59,"column":25,"nodeType":"369","messageId":"400","endLine":59,"endColumn":29},{"ruleId":"367","severity":1,"message":"404","line":1,"column":27,"nodeType":"369","messageId":"370","endLine":1,"endColumn":34},{"ruleId":"390","severity":1,"message":"405","line":81,"column":8,"nodeType":"392","endLine":81,"endColumn":20,"suggestions":"406"},{"ruleId":"367","severity":1,"message":"407","line":83,"column":13,"nodeType":"369","messageId":"370","endLine":83,"endColumn":19},{"ruleId":"367","severity":1,"message":"408","line":83,"column":21,"nodeType":"369","messageId":"370","endLine":83,"endColumn":28},{"ruleId":"367","severity":1,"message":"409","line":83,"column":52,"nodeType":"369","messageId":"370","endLine":83,"endColumn":65},{"ruleId":"390","severity":1,"message":"410","line":94,"column":8,"nodeType":"392","endLine":94,"endColumn":31,"suggestions":"411"},{"ruleId":"390","severity":1,"message":"412","line":94,"column":9,"nodeType":"413","endLine":94,"endColumn":30},{"ruleId":"367","severity":1,"message":"414","line":4,"column":8,"nodeType":"369","messageId":"370","endLine":4,"endColumn":12},{"ruleId":"398","severity":1,"message":"399","line":38,"column":13,"nodeType":"369","messageId":"400","endLine":38,"endColumn":17},{"ruleId":"415","severity":1,"message":"416","line":94,"column":90,"nodeType":"417","messageId":"418","endLine":94,"endColumn":92},{"ruleId":"398","severity":1,"message":"399","line":149,"column":13,"nodeType":"369","messageId":"400","endLine":149,"endColumn":17},{"ruleId":"398","severity":1,"message":"399","line":163,"column":13,"nodeType":"369","messageId":"400","endLine":163,"endColumn":17},{"ruleId":"398","severity":1,"message":"399","line":184,"column":13,"nodeType":"369","messageId":"400","endLine":184,"endColumn":17},{"ruleId":"415","severity":1,"message":"416","line":200,"column":34,"nodeType":"417","messageId":"418","endLine":200,"endColumn":36},{"ruleId":"367","severity":1,"message":"419","line":2,"column":8,"nodeType":"369","messageId":"370","endLine":2,"endColumn":11},{"ruleId":"367","severity":1,"message":"420","line":4,"column":10,"nodeType":"369","messageId":"370","endLine":4,"endColumn":15},{"ruleId":"367","severity":1,"message":"421","line":4,"column":17,"nodeType":"369","messageId":"370","endLine":4,"endColumn":21},{"ruleId":"367","severity":1,"message":"420","line":4,"column":10,"nodeType":"369","messageId":"370","endLine":4,"endColumn":15},{"ruleId":"367","severity":1,"message":"421","line":4,"column":17,"nodeType":"369","messageId":"370","endLine":4,"endColumn":21},{"ruleId":"390","severity":1,"message":"422","line":37,"column":32,"nodeType":"369","endLine":37,"endColumn":39},{"ruleId":"390","severity":1,"message":"423","line":38,"column":8,"nodeType":"392","endLine":38,"endColumn":13,"suggestions":"424"},{"ruleId":"390","severity":1,"message":"425","line":28,"column":8,"nodeType":"392","endLine":28,"endColumn":13,"suggestions":"426"},{"ruleId":"367","severity":1,"message":"427","line":249,"column":11,"nodeType":"369","messageId":"370","endLine":249,"endColumn":18},{"ruleId":"367","severity":1,"message":"428","line":249,"column":20,"nodeType":"369","messageId":"370","endLine":249,"endColumn":29},{"ruleId":"367","severity":1,"message":"404","line":1,"column":27,"nodeType":"369","messageId":"370","endLine":1,"endColumn":34},{"ruleId":"367","severity":1,"message":"404","line":1,"column":27,"nodeType":"369","messageId":"370","endLine":1,"endColumn":34},"no-unused-vars","'StyledEngineProvider' is defined but never used.","Identifier","unusedVar","no-native-reassign",["429"],"no-negated-in-lhs",["430"],"'PublicRoute' is defined but never used.","'adaptV4Theme' is defined but never used.","'classnames' is defined but never used.","'google' is defined but never used.",["429"],["430"],"'Link' is defined but never used.","'Button' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'MUIDataTable' is defined but never used.","'Checkbox' is defined but never used.","'error' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'customFetch'. Either include it or remove the dependency array.","ArrayExpression",["431"],"React Hook useEffect has a missing dependency: 'itemsUrl'. Either include it or remove the dependency array.",["432"],["433"],"'handleSelectAll' is assigned a value but never used.","no-redeclare","'body' is already defined.","redeclared","'body' is assigned a value but never used.","'Typography' is defined but never used.","'useEffect' is defined but never used.","'useMemo' is defined but never used.","React Hook useEffect has a missing dependency: 'setFieldValue'. Either include it or remove the dependency array.",["434"],"'errors' is assigned a value but never used.","'touched' is assigned a value but never used.","'setSubmitting' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setData' and 'values'. Either include them or remove the dependency array.",["435"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","'Chip' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Box' is defined but never used.","'Stack' is defined but never used.","'Grid' is defined but never used.","The ref value 'abortCont.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'abortCont.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["436"],"React Hook useEffect has missing dependencies: 'callback' and 'customFetch'. Either include them or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["437"],"'palette' is assigned a value but never used.","'functions' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"438","fix":"439"},{"desc":"440","fix":"441"},{"desc":"442","fix":"443"},{"desc":"444","fix":"445"},{"desc":"446","fix":"447"},{"desc":"448","fix":"449"},{"desc":"450","fix":"451"},"Update the dependencies array to be: [customFetch, itemsUrl, refresh]",{"range":"452","text":"453"},"Update the dependencies array to be: [items, itemsUrl]",{"range":"454","text":"455"},"Update the dependencies array to be: [itemsUrl, loading]",{"range":"456","text":"457"},"Update the dependencies array to be: [formValues, setFieldValue]",{"range":"458","text":"459"},"Update the dependencies array to be: [setData, values]",{"range":"460","text":"461"},"Update the dependencies array to be: [fetchData, url]",{"range":"462","text":"463"},"Update the dependencies array to be: [callback, customFetch, url]",{"range":"464","text":"465"},[3153,3172],"[customFetch, itemsUrl, refresh]",[3272,3279],"[items, itemsUrl]",[3386,3395],"[itemsUrl, loading]",[2533,2545],"[formValues, setFieldValue]",[2990,3013],"[setData, values]",[1284,1289],"[fetchData, url]",[919,924],"[callback, customFetch, url]"]